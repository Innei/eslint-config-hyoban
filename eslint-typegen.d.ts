/* This file is generated by eslint-typegen, for augmenting rules types in ESLint */
/* You might want to include this file in tsconfig.json but excluded from git */
/* eslint-typegen-hash: 6270oloNa1 */

/* eslint-disable */
/* prettier-ignore */
import type { Linter } from 'eslint'
declare module 'eslint' {
  namespace Linter {
    interface RulesRecord extends RuleOptions {}
  }
}

export interface RuleOptions {
  '@eslint-react/dom/no-children-in-void-dom-elements'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-dangerously-set-innerhtml'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-dangerously-set-innerhtml-with-children'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-find-dom-node'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-missing-button-type'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-missing-iframe-sandbox'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-namespace'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-render-return-value'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-script-url'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-unsafe-iframe-sandbox'?: Linter.RuleEntry<[]>
  '@eslint-react/dom/no-unsafe-target-blank'?: Linter.RuleEntry<[]>
  '@eslint-react/ensure-forward-ref-using-ref'?: Linter.RuleEntry<[]>
  '@eslint-react/hooks-extra/ensure-custom-hooks-using-other-hooks'?: Linter.RuleEntry<[]>
  '@eslint-react/hooks-extra/ensure-use-callback-has-non-empty-deps'?: Linter.RuleEntry<[]>
  '@eslint-react/hooks-extra/ensure-use-memo-has-non-empty-deps'?: Linter.RuleEntry<[]>
  '@eslint-react/hooks-extra/prefer-use-state-lazy-initialization'?: Linter.RuleEntry<[]>
  /**
   * enforce component naming convention to 'PascalCase' or 'CONSTANT_CASE'
   * @see https://eslint-react.xyz/rules/naming-convention-component-name
   */
  '@eslint-react/naming-convention/component-name'?: Linter.RuleEntry<EslintReactNamingConventionComponentName>
  /**
   * enforce naming convention for JSX filenames
   * @see https://eslint-react.xyz/rules/naming-convention-filename
   */
  '@eslint-react/naming-convention/filename'?: Linter.RuleEntry<EslintReactNamingConventionFilename>
  /**
   * enforce naming convention for JSX file extensions
   * @see https://eslint-react.xyz/rules/naming-convention-filename-extension
   */
  '@eslint-react/naming-convention/filename-extension'?: Linter.RuleEntry<EslintReactNamingConventionFilenameExtension>
  '@eslint-react/naming-convention/use-state'?: Linter.RuleEntry<[]>
  '@eslint-react/no-access-state-in-setstate'?: Linter.RuleEntry<[]>
  '@eslint-react/no-array-index-key'?: Linter.RuleEntry<[]>
  '@eslint-react/no-children-count'?: Linter.RuleEntry<[]>
  '@eslint-react/no-children-for-each'?: Linter.RuleEntry<[]>
  '@eslint-react/no-children-map'?: Linter.RuleEntry<[]>
  '@eslint-react/no-children-only'?: Linter.RuleEntry<[]>
  '@eslint-react/no-children-prop'?: Linter.RuleEntry<[]>
  '@eslint-react/no-children-to-array'?: Linter.RuleEntry<[]>
  '@eslint-react/no-class-component'?: Linter.RuleEntry<[]>
  '@eslint-react/no-clone-element'?: Linter.RuleEntry<[]>
  '@eslint-react/no-comment-textnodes'?: Linter.RuleEntry<[]>
  '@eslint-react/no-complicated-conditional-rendering'?: Linter.RuleEntry<[]>
  '@eslint-react/no-component-will-mount'?: Linter.RuleEntry<[]>
  '@eslint-react/no-component-will-receive-props'?: Linter.RuleEntry<[]>
  '@eslint-react/no-component-will-update'?: Linter.RuleEntry<[]>
  '@eslint-react/no-create-ref'?: Linter.RuleEntry<[]>
  '@eslint-react/no-direct-mutation-state'?: Linter.RuleEntry<[]>
  '@eslint-react/no-duplicate-key'?: Linter.RuleEntry<[]>
  '@eslint-react/no-implicit-key'?: Linter.RuleEntry<[]>
  '@eslint-react/no-leaked-conditional-rendering'?: Linter.RuleEntry<[]>
  '@eslint-react/no-missing-component-display-name'?: Linter.RuleEntry<[]>
  '@eslint-react/no-missing-key'?: Linter.RuleEntry<[]>
  '@eslint-react/no-nested-components'?: Linter.RuleEntry<[]>
  '@eslint-react/no-redundant-should-component-update'?: Linter.RuleEntry<[]>
  '@eslint-react/no-set-state-in-component-did-mount'?: Linter.RuleEntry<[]>
  '@eslint-react/no-set-state-in-component-did-update'?: Linter.RuleEntry<[]>
  '@eslint-react/no-set-state-in-component-will-update'?: Linter.RuleEntry<[]>
  '@eslint-react/no-string-refs'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unsafe-component-will-mount'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unsafe-component-will-receive-props'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unsafe-component-will-update'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unstable-context-value'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unstable-default-props'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unused-class-component-members'?: Linter.RuleEntry<[]>
  '@eslint-react/no-unused-state'?: Linter.RuleEntry<[]>
  '@eslint-react/no-useless-fragment'?: Linter.RuleEntry<[]>
  '@eslint-react/prefer-destructuring-assignment'?: Linter.RuleEntry<[]>
  '@eslint-react/prefer-shorthand-boolean'?: Linter.RuleEntry<[]>
  '@eslint-react/prefer-shorthand-fragment'?: Linter.RuleEntry<[]>
  '@next/next/google-font-display'?: Linter.RuleEntry<[]>
  '@next/next/google-font-preconnect'?: Linter.RuleEntry<[]>
  '@next/next/inline-script-id'?: Linter.RuleEntry<[]>
  '@next/next/next-script-for-ga'?: Linter.RuleEntry<[]>
  '@next/next/no-assign-module-variable'?: Linter.RuleEntry<[]>
  '@next/next/no-async-client-component'?: Linter.RuleEntry<[]>
  '@next/next/no-before-interactive-script-outside-document'?: Linter.RuleEntry<[]>
  '@next/next/no-css-tags'?: Linter.RuleEntry<[]>
  '@next/next/no-document-import-in-page'?: Linter.RuleEntry<[]>
  '@next/next/no-duplicate-head'?: Linter.RuleEntry<[]>
  '@next/next/no-head-element'?: Linter.RuleEntry<[]>
  '@next/next/no-head-import-in-document'?: Linter.RuleEntry<[]>
  /**
   * Prevent usage of `<a>` elements to navigate to internal Next.js pages.
   * @see https://nextjs.org/docs/messages/no-html-link-for-pages
   */
  '@next/next/no-html-link-for-pages'?: Linter.RuleEntry<NextNextNoHtmlLinkForPages>
  '@next/next/no-img-element'?: Linter.RuleEntry<[]>
  '@next/next/no-page-custom-font'?: Linter.RuleEntry<[]>
  '@next/next/no-script-component-in-head'?: Linter.RuleEntry<[]>
  '@next/next/no-styled-jsx-in-document'?: Linter.RuleEntry<[]>
  '@next/next/no-sync-scripts'?: Linter.RuleEntry<[]>
  '@next/next/no-title-in-document-head'?: Linter.RuleEntry<[]>
  '@next/next/no-typos'?: Linter.RuleEntry<[]>
  '@next/next/no-unwanted-polyfillio'?: Linter.RuleEntry<[]>
  /**
   * Enforce linebreaks after opening and before closing array brackets
   * @see https://eslint.style/rules/js/array-bracket-newline
   */
  '@stylistic/array-bracket-newline'?: Linter.RuleEntry<StylisticArrayBracketNewline>
  /**
   * Enforce consistent spacing inside array brackets
   * @see https://eslint.style/rules/js/array-bracket-spacing
   */
  '@stylistic/array-bracket-spacing'?: Linter.RuleEntry<StylisticArrayBracketSpacing>
  /**
   * Enforce line breaks after each array element
   * @see https://eslint.style/rules/js/array-element-newline
   */
  '@stylistic/array-element-newline'?: Linter.RuleEntry<StylisticArrayElementNewline>
  /**
   * Require parentheses around arrow function arguments
   * @see https://eslint.style/rules/js/arrow-parens
   */
  '@stylistic/arrow-parens'?: Linter.RuleEntry<StylisticArrowParens>
  /**
   * Enforce consistent spacing before and after the arrow in arrow functions
   * @see https://eslint.style/rules/js/arrow-spacing
   */
  '@stylistic/arrow-spacing'?: Linter.RuleEntry<StylisticArrowSpacing>
  /**
   * Disallow or enforce spaces inside of blocks after opening block and before closing block
   * @see https://eslint.style/rules/ts/block-spacing
   */
  '@stylistic/block-spacing'?: Linter.RuleEntry<StylisticBlockSpacing>
  /**
   * Enforce consistent brace style for blocks
   * @see https://eslint.style/rules/ts/brace-style
   */
  '@stylistic/brace-style'?: Linter.RuleEntry<StylisticBraceStyle>
  /**
   * Require or disallow trailing commas
   * @see https://eslint.style/rules/ts/comma-dangle
   */
  '@stylistic/comma-dangle'?: Linter.RuleEntry<StylisticCommaDangle>
  /**
   * Enforce consistent spacing before and after commas
   * @see https://eslint.style/rules/ts/comma-spacing
   */
  '@stylistic/comma-spacing'?: Linter.RuleEntry<StylisticCommaSpacing>
  /**
   * Enforce consistent comma style
   * @see https://eslint.style/rules/js/comma-style
   */
  '@stylistic/comma-style'?: Linter.RuleEntry<StylisticCommaStyle>
  /**
   * Enforce consistent spacing inside computed property brackets
   * @see https://eslint.style/rules/js/computed-property-spacing
   */
  '@stylistic/computed-property-spacing'?: Linter.RuleEntry<StylisticComputedPropertySpacing>
  /**
   * Enforce consistent newlines before and after dots
   * @see https://eslint.style/rules/js/dot-location
   */
  '@stylistic/dot-location'?: Linter.RuleEntry<StylisticDotLocation>
  /**
   * Require or disallow newline at the end of files
   * @see https://eslint.style/rules/js/eol-last
   */
  '@stylistic/eol-last'?: Linter.RuleEntry<StylisticEolLast>
  /**
   * Require or disallow spacing between function identifiers and their invocations
   * @see https://eslint.style/rules/ts/function-call-spacing
   */
  '@stylistic/func-call-spacing'?: Linter.RuleEntry<StylisticFuncCallSpacing>
  /**
   * Enforce line breaks between arguments of a function call
   * @see https://eslint.style/rules/js/function-call-argument-newline
   */
  '@stylistic/function-call-argument-newline'?: Linter.RuleEntry<StylisticFunctionCallArgumentNewline>
  /**
   * Require or disallow spacing between function identifiers and their invocations
   * @see https://eslint.style/rules/ts/function-call-spacing
   */
  '@stylistic/function-call-spacing'?: Linter.RuleEntry<StylisticFunctionCallSpacing>
  /**
   * Enforce consistent line breaks inside function parentheses
   * @see https://eslint.style/rules/js/function-paren-newline
   */
  '@stylistic/function-paren-newline'?: Linter.RuleEntry<StylisticFunctionParenNewline>
  /**
   * Enforce consistent spacing around `*` operators in generator functions
   * @see https://eslint.style/rules/js/generator-star-spacing
   */
  '@stylistic/generator-star-spacing'?: Linter.RuleEntry<StylisticGeneratorStarSpacing>
  /**
   * Enforce the location of arrow function bodies
   * @see https://eslint.style/rules/js/implicit-arrow-linebreak
   */
  '@stylistic/implicit-arrow-linebreak'?: Linter.RuleEntry<StylisticImplicitArrowLinebreak>
  /**
   * Enforce consistent indentation
   * @see https://eslint.style/rules/ts/indent
   */
  '@stylistic/indent'?: Linter.RuleEntry<StylisticIndent>
  /**
   * Indentation for binary operators
   * @see https://eslint.style/rules/plus/indent-binary-ops
   */
  '@stylistic/indent-binary-ops'?: Linter.RuleEntry<StylisticIndentBinaryOps>
  '@stylistic/jsx-child-element-spacing'?: Linter.RuleEntry<[]>
  /**
   * Enforce closing bracket location in JSX
   * @see https://eslint.style/rules/jsx/jsx-closing-bracket-location
   */
  '@stylistic/jsx-closing-bracket-location'?: Linter.RuleEntry<StylisticJsxClosingBracketLocation>
  '@stylistic/jsx-closing-tag-location'?: Linter.RuleEntry<[]>
  /**
   * Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes
   * @see https://eslint.style/rules/jsx/jsx-curly-brace-presence
   */
  '@stylistic/jsx-curly-brace-presence'?: Linter.RuleEntry<StylisticJsxCurlyBracePresence>
  /**
   * Enforce consistent linebreaks in curly braces in JSX attributes and expressions
   * @see https://eslint.style/rules/jsx/jsx-curly-newline
   */
  '@stylistic/jsx-curly-newline'?: Linter.RuleEntry<StylisticJsxCurlyNewline>
  /**
   * Enforce or disallow spaces inside of curly braces in JSX attributes and expressions
   * @see https://eslint.style/rules/jsx/jsx-curly-spacing
   */
  '@stylistic/jsx-curly-spacing'?: Linter.RuleEntry<StylisticJsxCurlySpacing>
  /**
   * Enforce or disallow spaces around equal signs in JSX attributes
   * @see https://eslint.style/rules/jsx/jsx-equals-spacing
   */
  '@stylistic/jsx-equals-spacing'?: Linter.RuleEntry<StylisticJsxEqualsSpacing>
  /**
   * Enforce proper position of the first property in JSX
   * @see https://eslint.style/rules/jsx/jsx-first-prop-new-line
   */
  '@stylistic/jsx-first-prop-new-line'?: Linter.RuleEntry<StylisticJsxFirstPropNewLine>
  /**
   * Enforce JSX indentation
   * @see https://eslint.style/rules/jsx/jsx-indent
   */
  '@stylistic/jsx-indent'?: Linter.RuleEntry<StylisticJsxIndent>
  /**
   * Enforce props indentation in JSX
   * @see https://eslint.style/rules/jsx/jsx-indent-props
   */
  '@stylistic/jsx-indent-props'?: Linter.RuleEntry<StylisticJsxIndentProps>
  /**
   * Enforce maximum of props on a single line in JSX
   * @see https://eslint.style/rules/jsx/jsx-max-props-per-line
   */
  '@stylistic/jsx-max-props-per-line'?: Linter.RuleEntry<StylisticJsxMaxPropsPerLine>
  /**
   * Require or prevent a new line after jsx elements and expressions.
   * @see https://eslint.style/rules/jsx/jsx-newline
   */
  '@stylistic/jsx-newline'?: Linter.RuleEntry<StylisticJsxNewline>
  /**
   * Require one JSX element per line
   * @see https://eslint.style/rules/jsx/jsx-one-expression-per-line
   */
  '@stylistic/jsx-one-expression-per-line'?: Linter.RuleEntry<StylisticJsxOneExpressionPerLine>
  /**
   * Enforce PascalCase for user-defined JSX components
   * @see https://eslint.style/rules/jsx/jsx-pascal-case
   */
  '@stylistic/jsx-pascal-case'?: Linter.RuleEntry<StylisticJsxPascalCase>
  '@stylistic/jsx-props-no-multi-spaces'?: Linter.RuleEntry<[]>
  /**
   * Enforce the consistent use of either double or single quotes in JSX attributes
   * @see https://eslint.style/rules/js/jsx-quotes
   */
  '@stylistic/jsx-quotes'?: Linter.RuleEntry<StylisticJsxQuotes>
  /**
   * Disallow extra closing tags for components without children
   * @see https://eslint.style/rules/jsx/jsx-self-closing-comp
   */
  '@stylistic/jsx-self-closing-comp'?: Linter.RuleEntry<StylisticJsxSelfClosingComp>
  /**
   * Enforce props alphabetical sorting
   * @see https://eslint.style/rules/jsx/jsx-sort-props
   */
  '@stylistic/jsx-sort-props'?: Linter.RuleEntry<StylisticJsxSortProps>
  /**
   * Enforce whitespace in and around the JSX opening and closing brackets
   * @see https://eslint.style/rules/jsx/jsx-tag-spacing
   */
  '@stylistic/jsx-tag-spacing'?: Linter.RuleEntry<StylisticJsxTagSpacing>
  /**
   * Disallow missing parentheses around multiline JSX
   * @see https://eslint.style/rules/jsx/jsx-wrap-multilines
   */
  '@stylistic/jsx-wrap-multilines'?: Linter.RuleEntry<StylisticJsxWrapMultilines>
  /**
   * Enforce consistent spacing between property names and type annotations in types and interfaces
   * @see https://eslint.style/rules/ts/key-spacing
   */
  '@stylistic/key-spacing'?: Linter.RuleEntry<StylisticKeySpacing>
  /**
   * Enforce consistent spacing before and after keywords
   * @see https://eslint.style/rules/ts/keyword-spacing
   */
  '@stylistic/keyword-spacing'?: Linter.RuleEntry<StylisticKeywordSpacing>
  /**
   * Enforce consistent linebreak style
   * @see https://eslint.style/rules/js/linebreak-style
   */
  '@stylistic/linebreak-style'?: Linter.RuleEntry<StylisticLinebreakStyle>
  /**
   * Require empty lines around comments
   * @see https://eslint.style/rules/ts/lines-around-comment
   */
  '@stylistic/lines-around-comment'?: Linter.RuleEntry<StylisticLinesAroundComment>
  /**
   * Require or disallow an empty line between class members
   * @see https://eslint.style/rules/ts/lines-between-class-members
   */
  '@stylistic/lines-between-class-members'?: Linter.RuleEntry<StylisticLinesBetweenClassMembers>
  /**
   * Enforce a maximum line length
   * @see https://eslint.style/rules/js/max-len
   */
  '@stylistic/max-len'?: Linter.RuleEntry<StylisticMaxLen>
  /**
   * Enforce a maximum number of statements allowed per line
   * @see https://eslint.style/rules/js/max-statements-per-line
   */
  '@stylistic/max-statements-per-line'?: Linter.RuleEntry<StylisticMaxStatementsPerLine>
  /**
   * Require a specific member delimiter style for interfaces and type literals
   * @see https://eslint.style/rules/ts/member-delimiter-style
   */
  '@stylistic/member-delimiter-style'?: Linter.RuleEntry<StylisticMemberDelimiterStyle>
  /**
   * Enforce newlines between operands of ternary expressions
   * @see https://eslint.style/rules/js/multiline-ternary
   */
  '@stylistic/multiline-ternary'?: Linter.RuleEntry<StylisticMultilineTernary>
  /**
   * Enforce or disallow parentheses when invoking a constructor with no arguments
   * @see https://eslint.style/rules/js/new-parens
   */
  '@stylistic/new-parens'?: Linter.RuleEntry<StylisticNewParens>
  /**
   * Require a newline after each call in a method chain
   * @see https://eslint.style/rules/js/newline-per-chained-call
   */
  '@stylistic/newline-per-chained-call'?: Linter.RuleEntry<StylisticNewlinePerChainedCall>
  /**
   * Disallow arrow functions where they could be confused with comparisons
   * @see https://eslint.style/rules/js/no-confusing-arrow
   */
  '@stylistic/no-confusing-arrow'?: Linter.RuleEntry<StylisticNoConfusingArrow>
  /**
   * Disallow unnecessary parentheses
   * @see https://eslint.style/rules/ts/no-extra-parens
   */
  '@stylistic/no-extra-parens'?: Linter.RuleEntry<StylisticNoExtraParens>
  '@stylistic/no-extra-semi'?: Linter.RuleEntry<[]>
  '@stylistic/no-floating-decimal'?: Linter.RuleEntry<[]>
  /**
   * Disallow mixed binary operators
   * @see https://eslint.style/rules/js/no-mixed-operators
   */
  '@stylistic/no-mixed-operators'?: Linter.RuleEntry<StylisticNoMixedOperators>
  /**
   * Disallow mixed spaces and tabs for indentation
   * @see https://eslint.style/rules/js/no-mixed-spaces-and-tabs
   */
  '@stylistic/no-mixed-spaces-and-tabs'?: Linter.RuleEntry<StylisticNoMixedSpacesAndTabs>
  /**
   * Disallow multiple spaces
   * @see https://eslint.style/rules/js/no-multi-spaces
   */
  '@stylistic/no-multi-spaces'?: Linter.RuleEntry<StylisticNoMultiSpaces>
  /**
   * Disallow multiple empty lines
   * @see https://eslint.style/rules/js/no-multiple-empty-lines
   */
  '@stylistic/no-multiple-empty-lines'?: Linter.RuleEntry<StylisticNoMultipleEmptyLines>
  /**
   * Disallow all tabs
   * @see https://eslint.style/rules/js/no-tabs
   */
  '@stylistic/no-tabs'?: Linter.RuleEntry<StylisticNoTabs>
  /**
   * Disallow trailing whitespace at the end of lines
   * @see https://eslint.style/rules/js/no-trailing-spaces
   */
  '@stylistic/no-trailing-spaces'?: Linter.RuleEntry<StylisticNoTrailingSpaces>
  '@stylistic/no-whitespace-before-property'?: Linter.RuleEntry<[]>
  /**
   * Enforce the location of single-line statements
   * @see https://eslint.style/rules/js/nonblock-statement-body-position
   */
  '@stylistic/nonblock-statement-body-position'?: Linter.RuleEntry<StylisticNonblockStatementBodyPosition>
  /**
   * Enforce consistent line breaks after opening and before closing braces
   * @see https://eslint.style/rules/js/object-curly-newline
   */
  '@stylistic/object-curly-newline'?: Linter.RuleEntry<StylisticObjectCurlyNewline>
  /**
   * Enforce consistent spacing inside braces
   * @see https://eslint.style/rules/ts/object-curly-spacing
   */
  '@stylistic/object-curly-spacing'?: Linter.RuleEntry<StylisticObjectCurlySpacing>
  /**
   * Enforce placing object properties on separate lines
   * @see https://eslint.style/rules/js/object-property-newline
   */
  '@stylistic/object-property-newline'?: Linter.RuleEntry<StylisticObjectPropertyNewline>
  /**
   * Require or disallow newlines around variable declarations
   * @see https://eslint.style/rules/js/one-var-declaration-per-line
   */
  '@stylistic/one-var-declaration-per-line'?: Linter.RuleEntry<StylisticOneVarDeclarationPerLine>
  /**
   * Enforce consistent linebreak style for operators
   * @see https://eslint.style/rules/js/operator-linebreak
   */
  '@stylistic/operator-linebreak'?: Linter.RuleEntry<StylisticOperatorLinebreak>
  /**
   * Require or disallow padding within blocks
   * @see https://eslint.style/rules/js/padded-blocks
   */
  '@stylistic/padded-blocks'?: Linter.RuleEntry<StylisticPaddedBlocks>
  /**
   * Require or disallow padding lines between statements
   * @see https://eslint.style/rules/ts/padding-line-between-statements
   */
  '@stylistic/padding-line-between-statements'?: Linter.RuleEntry<StylisticPaddingLineBetweenStatements>
  /**
   * Require quotes around object literal, type literal, interfaces and enums property names
   * @see https://eslint.style/rules/ts/quote-props
   */
  '@stylistic/quote-props'?: Linter.RuleEntry<StylisticQuoteProps>
  /**
   * Enforce the consistent use of either backticks, double, or single quotes
   * @see https://eslint.style/rules/ts/quotes
   */
  '@stylistic/quotes'?: Linter.RuleEntry<StylisticQuotes>
  /**
   * Enforce spacing between rest and spread operators and their expressions
   * @see https://eslint.style/rules/js/rest-spread-spacing
   */
  '@stylistic/rest-spread-spacing'?: Linter.RuleEntry<StylisticRestSpreadSpacing>
  /**
   * Require or disallow semicolons instead of ASI
   * @see https://eslint.style/rules/ts/semi
   */
  '@stylistic/semi'?: Linter.RuleEntry<StylisticSemi>
  /**
   * Enforce consistent spacing before and after semicolons
   * @see https://eslint.style/rules/js/semi-spacing
   */
  '@stylistic/semi-spacing'?: Linter.RuleEntry<StylisticSemiSpacing>
  /**
   * Enforce location of semicolons
   * @see https://eslint.style/rules/js/semi-style
   */
  '@stylistic/semi-style'?: Linter.RuleEntry<StylisticSemiStyle>
  /**
   * Enforce consistent spacing before blocks
   * @see https://eslint.style/rules/ts/space-before-blocks
   */
  '@stylistic/space-before-blocks'?: Linter.RuleEntry<StylisticSpaceBeforeBlocks>
  /**
   * Enforce consistent spacing before function parenthesis
   * @see https://eslint.style/rules/ts/space-before-function-paren
   */
  '@stylistic/space-before-function-paren'?: Linter.RuleEntry<StylisticSpaceBeforeFunctionParen>
  /**
   * Enforce consistent spacing inside parentheses
   * @see https://eslint.style/rules/js/space-in-parens
   */
  '@stylistic/space-in-parens'?: Linter.RuleEntry<StylisticSpaceInParens>
  /**
   * Require spacing around infix operators
   * @see https://eslint.style/rules/ts/space-infix-ops
   */
  '@stylistic/space-infix-ops'?: Linter.RuleEntry<StylisticSpaceInfixOps>
  /**
   * Enforce consistent spacing before or after unary operators
   * @see https://eslint.style/rules/js/space-unary-ops
   */
  '@stylistic/space-unary-ops'?: Linter.RuleEntry<StylisticSpaceUnaryOps>
  /**
   * Enforce consistent spacing after the `//` or `/*` in a comment
   * @see https://eslint.style/rules/js/spaced-comment
   */
  '@stylistic/spaced-comment'?: Linter.RuleEntry<StylisticSpacedComment>
  /**
   * Enforce spacing around colons of switch statements
   * @see https://eslint.style/rules/js/switch-colon-spacing
   */
  '@stylistic/switch-colon-spacing'?: Linter.RuleEntry<StylisticSwitchColonSpacing>
  /**
   * Require or disallow spacing around embedded expressions of template strings
   * @see https://eslint.style/rules/js/template-curly-spacing
   */
  '@stylistic/template-curly-spacing'?: Linter.RuleEntry<StylisticTemplateCurlySpacing>
  /**
   * Require or disallow spacing between template tags and their literals
   * @see https://eslint.style/rules/js/template-tag-spacing
   */
  '@stylistic/template-tag-spacing'?: Linter.RuleEntry<StylisticTemplateTagSpacing>
  /**
   * Require consistent spacing around type annotations
   * @see https://eslint.style/rules/ts/type-annotation-spacing
   */
  '@stylistic/type-annotation-spacing'?: Linter.RuleEntry<StylisticTypeAnnotationSpacing>
  '@stylistic/type-generic-spacing'?: Linter.RuleEntry<[]>
  '@stylistic/type-named-tuple-spacing'?: Linter.RuleEntry<[]>
  /**
   * Require parentheses around immediate `function` invocations
   * @see https://eslint.style/rules/js/wrap-iife
   */
  '@stylistic/wrap-iife'?: Linter.RuleEntry<StylisticWrapIife>
  '@stylistic/wrap-regex'?: Linter.RuleEntry<[]>
  /**
   * Require or disallow spacing around the `*` in `yield*` expressions
   * @see https://eslint.style/rules/js/yield-star-spacing
   */
  '@stylistic/yield-star-spacing'?: Linter.RuleEntry<StylisticYieldStarSpacing>
  '@typescript-eslint/adjacent-overload-signatures'?: Linter.RuleEntry<[]>
  /**
   * Require consistently using either `T[]` or `Array<T>` for arrays
   * @see https://typescript-eslint.io/rules/array-type
   */
  '@typescript-eslint/array-type'?: Linter.RuleEntry<TypescriptEslintArrayType>
  '@typescript-eslint/await-thenable'?: Linter.RuleEntry<[]>
  /**
   * Disallow `@ts-<directive>` comments or require descriptions after directives
   * @see https://typescript-eslint.io/rules/ban-ts-comment
   */
  '@typescript-eslint/ban-ts-comment'?: Linter.RuleEntry<TypescriptEslintBanTsComment>
  '@typescript-eslint/ban-tslint-comment'?: Linter.RuleEntry<[]>
  /**
   * Disallow certain types
   * @see https://typescript-eslint.io/rules/ban-types
   */
  '@typescript-eslint/ban-types'?: Linter.RuleEntry<TypescriptEslintBanTypes>
  /**
   * Disallow or enforce spaces inside of blocks after opening block and before closing block
   * @see https://typescript-eslint.io/rules/block-spacing
   * @deprecated
   */
  '@typescript-eslint/block-spacing'?: Linter.RuleEntry<TypescriptEslintBlockSpacing>
  /**
   * Enforce consistent brace style for blocks
   * @see https://typescript-eslint.io/rules/brace-style
   * @deprecated
   */
  '@typescript-eslint/brace-style'?: Linter.RuleEntry<TypescriptEslintBraceStyle>
  /**
   * Enforce that literals on classes are exposed in a consistent style
   * @see https://typescript-eslint.io/rules/class-literal-property-style
   */
  '@typescript-eslint/class-literal-property-style'?: Linter.RuleEntry<TypescriptEslintClassLiteralPropertyStyle>
  /**
   * Enforce that class methods utilize `this`
   * @see https://typescript-eslint.io/rules/class-methods-use-this
   */
  '@typescript-eslint/class-methods-use-this'?: Linter.RuleEntry<TypescriptEslintClassMethodsUseThis>
  /**
   * Require or disallow trailing commas
   * @see https://typescript-eslint.io/rules/comma-dangle
   * @deprecated
   */
  '@typescript-eslint/comma-dangle'?: Linter.RuleEntry<TypescriptEslintCommaDangle>
  /**
   * Enforce consistent spacing before and after commas
   * @see https://typescript-eslint.io/rules/comma-spacing
   * @deprecated
   */
  '@typescript-eslint/comma-spacing'?: Linter.RuleEntry<TypescriptEslintCommaSpacing>
  /**
   * Enforce specifying generic type arguments on type annotation or constructor name of a constructor call
   * @see https://typescript-eslint.io/rules/consistent-generic-constructors
   */
  '@typescript-eslint/consistent-generic-constructors'?: Linter.RuleEntry<TypescriptEslintConsistentGenericConstructors>
  /**
   * Require or disallow the `Record` type
   * @see https://typescript-eslint.io/rules/consistent-indexed-object-style
   */
  '@typescript-eslint/consistent-indexed-object-style'?: Linter.RuleEntry<TypescriptEslintConsistentIndexedObjectStyle>
  /**
   * Require `return` statements to either always or never specify values
   * @see https://typescript-eslint.io/rules/consistent-return
   */
  '@typescript-eslint/consistent-return'?: Linter.RuleEntry<TypescriptEslintConsistentReturn>
  /**
   * Enforce consistent usage of type assertions
   * @see https://typescript-eslint.io/rules/consistent-type-assertions
   */
  '@typescript-eslint/consistent-type-assertions'?: Linter.RuleEntry<TypescriptEslintConsistentTypeAssertions>
  /**
   * Enforce type definitions to consistently use either `interface` or `type`
   * @see https://typescript-eslint.io/rules/consistent-type-definitions
   */
  '@typescript-eslint/consistent-type-definitions'?: Linter.RuleEntry<TypescriptEslintConsistentTypeDefinitions>
  /**
   * Enforce consistent usage of type exports
   * @see https://typescript-eslint.io/rules/consistent-type-exports
   */
  '@typescript-eslint/consistent-type-exports'?: Linter.RuleEntry<TypescriptEslintConsistentTypeExports>
  /**
   * Enforce consistent usage of type imports
   * @see https://typescript-eslint.io/rules/consistent-type-imports
   */
  '@typescript-eslint/consistent-type-imports'?: Linter.RuleEntry<TypescriptEslintConsistentTypeImports>
  '@typescript-eslint/default-param-last'?: Linter.RuleEntry<[]>
  /**
   * Enforce dot notation whenever possible
   * @see https://typescript-eslint.io/rules/dot-notation
   */
  '@typescript-eslint/dot-notation'?: Linter.RuleEntry<TypescriptEslintDotNotation>
  /**
   * Require explicit return types on functions and class methods
   * @see https://typescript-eslint.io/rules/explicit-function-return-type
   */
  '@typescript-eslint/explicit-function-return-type'?: Linter.RuleEntry<TypescriptEslintExplicitFunctionReturnType>
  /**
   * Require explicit accessibility modifiers on class properties and methods
   * @see https://typescript-eslint.io/rules/explicit-member-accessibility
   */
  '@typescript-eslint/explicit-member-accessibility'?: Linter.RuleEntry<TypescriptEslintExplicitMemberAccessibility>
  /**
   * Require explicit return and argument types on exported functions' and classes' public class methods
   * @see https://typescript-eslint.io/rules/explicit-module-boundary-types
   */
  '@typescript-eslint/explicit-module-boundary-types'?: Linter.RuleEntry<TypescriptEslintExplicitModuleBoundaryTypes>
  /**
   * Require or disallow spacing between function identifiers and their invocations
   * @see https://typescript-eslint.io/rules/func-call-spacing
   * @deprecated
   */
  '@typescript-eslint/func-call-spacing'?: Linter.RuleEntry<TypescriptEslintFuncCallSpacing>
  /**
   * Enforce consistent indentation
   * @see https://typescript-eslint.io/rules/indent
   * @deprecated
   */
  '@typescript-eslint/indent'?: Linter.RuleEntry<TypescriptEslintIndent>
  /**
   * Require or disallow initialization in variable declarations
   * @see https://typescript-eslint.io/rules/init-declarations
   */
  '@typescript-eslint/init-declarations'?: Linter.RuleEntry<TypescriptEslintInitDeclarations>
  /**
   * Enforce consistent spacing between property names and type annotations in types and interfaces
   * @see https://typescript-eslint.io/rules/key-spacing
   * @deprecated
   */
  '@typescript-eslint/key-spacing'?: Linter.RuleEntry<TypescriptEslintKeySpacing>
  /**
   * Enforce consistent spacing before and after keywords
   * @see https://typescript-eslint.io/rules/keyword-spacing
   * @deprecated
   */
  '@typescript-eslint/keyword-spacing'?: Linter.RuleEntry<TypescriptEslintKeywordSpacing>
  /**
   * Require empty lines around comments
   * @see https://typescript-eslint.io/rules/lines-around-comment
   * @deprecated
   */
  '@typescript-eslint/lines-around-comment'?: Linter.RuleEntry<TypescriptEslintLinesAroundComment>
  /**
   * Require or disallow an empty line between class members
   * @see https://typescript-eslint.io/rules/lines-between-class-members
   * @deprecated
   */
  '@typescript-eslint/lines-between-class-members'?: Linter.RuleEntry<TypescriptEslintLinesBetweenClassMembers>
  /**
   * Enforce a maximum number of parameters in function definitions
   * @see https://typescript-eslint.io/rules/max-params
   */
  '@typescript-eslint/max-params'?: Linter.RuleEntry<TypescriptEslintMaxParams>
  /**
   * Require a specific member delimiter style for interfaces and type literals
   * @see https://typescript-eslint.io/rules/member-delimiter-style
   * @deprecated
   */
  '@typescript-eslint/member-delimiter-style'?: Linter.RuleEntry<TypescriptEslintMemberDelimiterStyle>
  /**
   * Require a consistent member declaration order
   * @see https://typescript-eslint.io/rules/member-ordering
   */
  '@typescript-eslint/member-ordering'?: Linter.RuleEntry<TypescriptEslintMemberOrdering>
  /**
   * Enforce using a particular method signature syntax
   * @see https://typescript-eslint.io/rules/method-signature-style
   */
  '@typescript-eslint/method-signature-style'?: Linter.RuleEntry<TypescriptEslintMethodSignatureStyle>
  /**
   * Enforce naming conventions for everything across a codebase
   * @see https://typescript-eslint.io/rules/naming-convention
   */
  '@typescript-eslint/naming-convention'?: Linter.RuleEntry<TypescriptEslintNamingConvention>
  '@typescript-eslint/no-array-constructor'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-array-delete'?: Linter.RuleEntry<[]>
  /**
   * Require `.toString()` to only be called on objects which provide useful information when stringified
   * @see https://typescript-eslint.io/rules/no-base-to-string
   */
  '@typescript-eslint/no-base-to-string'?: Linter.RuleEntry<TypescriptEslintNoBaseToString>
  '@typescript-eslint/no-confusing-non-null-assertion'?: Linter.RuleEntry<[]>
  /**
   * Require expressions of type void to appear in statement position
   * @see https://typescript-eslint.io/rules/no-confusing-void-expression
   */
  '@typescript-eslint/no-confusing-void-expression'?: Linter.RuleEntry<TypescriptEslintNoConfusingVoidExpression>
  '@typescript-eslint/no-dupe-class-members'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-duplicate-enum-values'?: Linter.RuleEntry<[]>
  /**
   * Disallow duplicate constituents of union or intersection types
   * @see https://typescript-eslint.io/rules/no-duplicate-type-constituents
   */
  '@typescript-eslint/no-duplicate-type-constituents'?: Linter.RuleEntry<TypescriptEslintNoDuplicateTypeConstituents>
  '@typescript-eslint/no-dynamic-delete'?: Linter.RuleEntry<[]>
  /**
   * Disallow empty functions
   * @see https://typescript-eslint.io/rules/no-empty-function
   */
  '@typescript-eslint/no-empty-function'?: Linter.RuleEntry<TypescriptEslintNoEmptyFunction>
  /**
   * Disallow the declaration of empty interfaces
   * @see https://typescript-eslint.io/rules/no-empty-interface
   */
  '@typescript-eslint/no-empty-interface'?: Linter.RuleEntry<TypescriptEslintNoEmptyInterface>
  /**
   * Disallow the `any` type
   * @see https://typescript-eslint.io/rules/no-explicit-any
   */
  '@typescript-eslint/no-explicit-any'?: Linter.RuleEntry<TypescriptEslintNoExplicitAny>
  '@typescript-eslint/no-extra-non-null-assertion'?: Linter.RuleEntry<[]>
  /**
   * Disallow unnecessary parentheses
   * @see https://typescript-eslint.io/rules/no-extra-parens
   * @deprecated
   */
  '@typescript-eslint/no-extra-parens'?: Linter.RuleEntry<TypescriptEslintNoExtraParens>
  '@typescript-eslint/no-extra-semi'?: Linter.RuleEntry<[]>
  /**
   * Disallow classes used as namespaces
   * @see https://typescript-eslint.io/rules/no-extraneous-class
   */
  '@typescript-eslint/no-extraneous-class'?: Linter.RuleEntry<TypescriptEslintNoExtraneousClass>
  /**
   * Require Promise-like statements to be handled appropriately
   * @see https://typescript-eslint.io/rules/no-floating-promises
   */
  '@typescript-eslint/no-floating-promises'?: Linter.RuleEntry<TypescriptEslintNoFloatingPromises>
  '@typescript-eslint/no-for-in-array'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-implied-eval'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-import-type-side-effects'?: Linter.RuleEntry<[]>
  /**
   * Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean
   * @see https://typescript-eslint.io/rules/no-inferrable-types
   */
  '@typescript-eslint/no-inferrable-types'?: Linter.RuleEntry<TypescriptEslintNoInferrableTypes>
  /**
   * Disallow `this` keywords outside of classes or class-like objects
   * @see https://typescript-eslint.io/rules/no-invalid-this
   */
  '@typescript-eslint/no-invalid-this'?: Linter.RuleEntry<TypescriptEslintNoInvalidThis>
  /**
   * Disallow `void` type outside of generic or return types
   * @see https://typescript-eslint.io/rules/no-invalid-void-type
   */
  '@typescript-eslint/no-invalid-void-type'?: Linter.RuleEntry<TypescriptEslintNoInvalidVoidType>
  '@typescript-eslint/no-loop-func'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-loss-of-precision'?: Linter.RuleEntry<[]>
  /**
   * Disallow magic numbers
   * @see https://typescript-eslint.io/rules/no-magic-numbers
   */
  '@typescript-eslint/no-magic-numbers'?: Linter.RuleEntry<TypescriptEslintNoMagicNumbers>
  /**
   * Disallow the `void` operator except when used to discard a value
   * @see https://typescript-eslint.io/rules/no-meaningless-void-operator
   */
  '@typescript-eslint/no-meaningless-void-operator'?: Linter.RuleEntry<TypescriptEslintNoMeaninglessVoidOperator>
  '@typescript-eslint/no-misused-new'?: Linter.RuleEntry<[]>
  /**
   * Disallow Promises in places not designed to handle them
   * @see https://typescript-eslint.io/rules/no-misused-promises
   */
  '@typescript-eslint/no-misused-promises'?: Linter.RuleEntry<TypescriptEslintNoMisusedPromises>
  '@typescript-eslint/no-mixed-enums'?: Linter.RuleEntry<[]>
  /**
   * Disallow TypeScript namespaces
   * @see https://typescript-eslint.io/rules/no-namespace
   */
  '@typescript-eslint/no-namespace'?: Linter.RuleEntry<TypescriptEslintNoNamespace>
  '@typescript-eslint/no-non-null-asserted-nullish-coalescing'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-non-null-asserted-optional-chain'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-non-null-assertion'?: Linter.RuleEntry<[]>
  /**
   * Disallow variable redeclaration
   * @see https://typescript-eslint.io/rules/no-redeclare
   */
  '@typescript-eslint/no-redeclare'?: Linter.RuleEntry<TypescriptEslintNoRedeclare>
  '@typescript-eslint/no-redundant-type-constituents'?: Linter.RuleEntry<[]>
  /**
   * Disallow invocation of `require()`
   * @see https://typescript-eslint.io/rules/no-require-imports
   */
  '@typescript-eslint/no-require-imports'?: Linter.RuleEntry<TypescriptEslintNoRequireImports>
  /**
   * Disallow specified modules when loaded by `import`
   * @see https://typescript-eslint.io/rules/no-restricted-imports
   */
  '@typescript-eslint/no-restricted-imports'?: Linter.RuleEntry<TypescriptEslintNoRestrictedImports>
  /**
   * Disallow variable declarations from shadowing variables declared in the outer scope
   * @see https://typescript-eslint.io/rules/no-shadow
   */
  '@typescript-eslint/no-shadow'?: Linter.RuleEntry<TypescriptEslintNoShadow>
  /**
   * Disallow aliasing `this`
   * @see https://typescript-eslint.io/rules/no-this-alias
   */
  '@typescript-eslint/no-this-alias'?: Linter.RuleEntry<TypescriptEslintNoThisAlias>
  /**
   * Disallow throwing literals as exceptions
   * @see https://typescript-eslint.io/rules/no-throw-literal
   * @deprecated
   */
  '@typescript-eslint/no-throw-literal'?: Linter.RuleEntry<TypescriptEslintNoThrowLiteral>
  /**
   * Disallow type aliases
   * @see https://typescript-eslint.io/rules/no-type-alias
   * @deprecated
   */
  '@typescript-eslint/no-type-alias'?: Linter.RuleEntry<TypescriptEslintNoTypeAlias>
  /**
   * Disallow unnecessary equality comparisons against boolean literals
   * @see https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare
   */
  '@typescript-eslint/no-unnecessary-boolean-literal-compare'?: Linter.RuleEntry<TypescriptEslintNoUnnecessaryBooleanLiteralCompare>
  /**
   * Disallow conditionals where the type is always truthy or always falsy
   * @see https://typescript-eslint.io/rules/no-unnecessary-condition
   */
  '@typescript-eslint/no-unnecessary-condition'?: Linter.RuleEntry<TypescriptEslintNoUnnecessaryCondition>
  '@typescript-eslint/no-unnecessary-qualifier'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unnecessary-type-arguments'?: Linter.RuleEntry<[]>
  /**
   * Disallow type assertions that do not change the type of an expression
   * @see https://typescript-eslint.io/rules/no-unnecessary-type-assertion
   */
  '@typescript-eslint/no-unnecessary-type-assertion'?: Linter.RuleEntry<TypescriptEslintNoUnnecessaryTypeAssertion>
  '@typescript-eslint/no-unnecessary-type-constraint'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-argument'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-assignment'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-call'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-declaration-merging'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-enum-comparison'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-member-access'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-return'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-unsafe-unary-minus'?: Linter.RuleEntry<[]>
  /**
   * Disallow unused expressions
   * @see https://typescript-eslint.io/rules/no-unused-expressions
   */
  '@typescript-eslint/no-unused-expressions'?: Linter.RuleEntry<TypescriptEslintNoUnusedExpressions>
  /**
   * Disallow unused variables
   * @see https://typescript-eslint.io/rules/no-unused-vars
   */
  '@typescript-eslint/no-unused-vars'?: Linter.RuleEntry<TypescriptEslintNoUnusedVars>
  /**
   * Disallow the use of variables before they are defined
   * @see https://typescript-eslint.io/rules/no-use-before-define
   */
  '@typescript-eslint/no-use-before-define'?: Linter.RuleEntry<TypescriptEslintNoUseBeforeDefine>
  '@typescript-eslint/no-useless-constructor'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-useless-empty-export'?: Linter.RuleEntry<[]>
  '@typescript-eslint/no-useless-template-literals'?: Linter.RuleEntry<[]>
  /**
   * Disallow `require` statements except in import statements
   * @see https://typescript-eslint.io/rules/no-var-requires
   */
  '@typescript-eslint/no-var-requires'?: Linter.RuleEntry<TypescriptEslintNoVarRequires>
  '@typescript-eslint/non-nullable-type-assertion-style'?: Linter.RuleEntry<[]>
  /**
   * Enforce consistent spacing inside braces
   * @see https://typescript-eslint.io/rules/object-curly-spacing
   * @deprecated
   */
  '@typescript-eslint/object-curly-spacing'?: Linter.RuleEntry<TypescriptEslintObjectCurlySpacing>
  /**
   * Disallow throwing non-`Error` values as exceptions
   * @see https://typescript-eslint.io/rules/only-throw-error
   */
  '@typescript-eslint/only-throw-error'?: Linter.RuleEntry<TypescriptEslintOnlyThrowError>
  /**
   * Require or disallow padding lines between statements
   * @see https://typescript-eslint.io/rules/padding-line-between-statements
   * @deprecated
   */
  '@typescript-eslint/padding-line-between-statements'?: Linter.RuleEntry<TypescriptEslintPaddingLineBetweenStatements>
  /**
   * Require or disallow parameter properties in class constructors
   * @see https://typescript-eslint.io/rules/parameter-properties
   */
  '@typescript-eslint/parameter-properties'?: Linter.RuleEntry<TypescriptEslintParameterProperties>
  '@typescript-eslint/prefer-as-const'?: Linter.RuleEntry<[]>
  /**
   * Require destructuring from arrays and/or objects
   * @see https://typescript-eslint.io/rules/prefer-destructuring
   */
  '@typescript-eslint/prefer-destructuring'?: Linter.RuleEntry<TypescriptEslintPreferDestructuring>
  '@typescript-eslint/prefer-enum-initializers'?: Linter.RuleEntry<[]>
  '@typescript-eslint/prefer-find'?: Linter.RuleEntry<[]>
  '@typescript-eslint/prefer-for-of'?: Linter.RuleEntry<[]>
  '@typescript-eslint/prefer-function-type'?: Linter.RuleEntry<[]>
  '@typescript-eslint/prefer-includes'?: Linter.RuleEntry<[]>
  /**
   * Require all enum members to be literal values
   * @see https://typescript-eslint.io/rules/prefer-literal-enum-member
   */
  '@typescript-eslint/prefer-literal-enum-member'?: Linter.RuleEntry<TypescriptEslintPreferLiteralEnumMember>
  '@typescript-eslint/prefer-namespace-keyword'?: Linter.RuleEntry<[]>
  /**
   * Enforce using the nullish coalescing operator instead of logical assignments or chaining
   * @see https://typescript-eslint.io/rules/prefer-nullish-coalescing
   */
  '@typescript-eslint/prefer-nullish-coalescing'?: Linter.RuleEntry<TypescriptEslintPreferNullishCoalescing>
  /**
   * Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects
   * @see https://typescript-eslint.io/rules/prefer-optional-chain
   */
  '@typescript-eslint/prefer-optional-chain'?: Linter.RuleEntry<TypescriptEslintPreferOptionalChain>
  /**
   * Require using Error objects as Promise rejection reasons
   * @see https://typescript-eslint.io/rules/prefer-promise-reject-errors
   */
  '@typescript-eslint/prefer-promise-reject-errors'?: Linter.RuleEntry<TypescriptEslintPreferPromiseRejectErrors>
  /**
   * Require private members to be marked as `readonly` if they're never modified outside of the constructor
   * @see https://typescript-eslint.io/rules/prefer-readonly
   */
  '@typescript-eslint/prefer-readonly'?: Linter.RuleEntry<TypescriptEslintPreferReadonly>
  /**
   * Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs
   * @see https://typescript-eslint.io/rules/prefer-readonly-parameter-types
   */
  '@typescript-eslint/prefer-readonly-parameter-types'?: Linter.RuleEntry<TypescriptEslintPreferReadonlyParameterTypes>
  '@typescript-eslint/prefer-reduce-type-parameter'?: Linter.RuleEntry<[]>
  '@typescript-eslint/prefer-regexp-exec'?: Linter.RuleEntry<[]>
  '@typescript-eslint/prefer-return-this-type'?: Linter.RuleEntry<[]>
  /**
   * Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings
   * @see https://typescript-eslint.io/rules/prefer-string-starts-ends-with
   */
  '@typescript-eslint/prefer-string-starts-ends-with'?: Linter.RuleEntry<TypescriptEslintPreferStringStartsEndsWith>
  '@typescript-eslint/prefer-ts-expect-error'?: Linter.RuleEntry<[]>
  /**
   * Require any function or method that returns a Promise to be marked async
   * @see https://typescript-eslint.io/rules/promise-function-async
   */
  '@typescript-eslint/promise-function-async'?: Linter.RuleEntry<TypescriptEslintPromiseFunctionAsync>
  /**
   * Enforce the consistent use of either backticks, double, or single quotes
   * @see https://typescript-eslint.io/rules/quotes
   * @deprecated
   */
  '@typescript-eslint/quotes'?: Linter.RuleEntry<TypescriptEslintQuotes>
  /**
   * Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`
   * @see https://typescript-eslint.io/rules/require-array-sort-compare
   */
  '@typescript-eslint/require-array-sort-compare'?: Linter.RuleEntry<TypescriptEslintRequireArraySortCompare>
  '@typescript-eslint/require-await'?: Linter.RuleEntry<[]>
  /**
   * Require both operands of addition to be the same type and be `bigint`, `number`, or `string`
   * @see https://typescript-eslint.io/rules/restrict-plus-operands
   */
  '@typescript-eslint/restrict-plus-operands'?: Linter.RuleEntry<TypescriptEslintRestrictPlusOperands>
  /**
   * Enforce template literal expressions to be of `string` type
   * @see https://typescript-eslint.io/rules/restrict-template-expressions
   */
  '@typescript-eslint/restrict-template-expressions'?: Linter.RuleEntry<TypescriptEslintRestrictTemplateExpressions>
  /**
   * Enforce consistent returning of awaited values
   * @see https://typescript-eslint.io/rules/return-await
   */
  '@typescript-eslint/return-await'?: Linter.RuleEntry<TypescriptEslintReturnAwait>
  /**
   * Require or disallow semicolons instead of ASI
   * @see https://typescript-eslint.io/rules/semi
   * @deprecated
   */
  '@typescript-eslint/semi'?: Linter.RuleEntry<TypescriptEslintSemi>
  /**
   * Enforce constituents of a type union/intersection to be sorted alphabetically
   * @see https://typescript-eslint.io/rules/sort-type-constituents
   */
  '@typescript-eslint/sort-type-constituents'?: Linter.RuleEntry<TypescriptEslintSortTypeConstituents>
  /**
   * Enforce consistent spacing before blocks
   * @see https://typescript-eslint.io/rules/space-before-blocks
   * @deprecated
   */
  '@typescript-eslint/space-before-blocks'?: Linter.RuleEntry<TypescriptEslintSpaceBeforeBlocks>
  /**
   * Enforce consistent spacing before function parenthesis
   * @see https://typescript-eslint.io/rules/space-before-function-paren
   * @deprecated
   */
  '@typescript-eslint/space-before-function-paren'?: Linter.RuleEntry<TypescriptEslintSpaceBeforeFunctionParen>
  /**
   * Require spacing around infix operators
   * @see https://typescript-eslint.io/rules/space-infix-ops
   * @deprecated
   */
  '@typescript-eslint/space-infix-ops'?: Linter.RuleEntry<TypescriptEslintSpaceInfixOps>
  /**
   * Disallow certain types in boolean expressions
   * @see https://typescript-eslint.io/rules/strict-boolean-expressions
   */
  '@typescript-eslint/strict-boolean-expressions'?: Linter.RuleEntry<TypescriptEslintStrictBooleanExpressions>
  /**
   * Require switch-case statements to be exhaustive
   * @see https://typescript-eslint.io/rules/switch-exhaustiveness-check
   */
  '@typescript-eslint/switch-exhaustiveness-check'?: Linter.RuleEntry<TypescriptEslintSwitchExhaustivenessCheck>
  /**
   * Disallow certain triple slash directives in favor of ES6-style import declarations
   * @see https://typescript-eslint.io/rules/triple-slash-reference
   */
  '@typescript-eslint/triple-slash-reference'?: Linter.RuleEntry<TypescriptEslintTripleSlashReference>
  /**
   * Require consistent spacing around type annotations
   * @see https://typescript-eslint.io/rules/type-annotation-spacing
   * @deprecated
   */
  '@typescript-eslint/type-annotation-spacing'?: Linter.RuleEntry<TypescriptEslintTypeAnnotationSpacing>
  /**
   * Require type annotations in certain places
   * @see https://typescript-eslint.io/rules/typedef
   */
  '@typescript-eslint/typedef'?: Linter.RuleEntry<TypescriptEslintTypedef>
  /**
   * Enforce unbound methods are called with their expected scope
   * @see https://typescript-eslint.io/rules/unbound-method
   */
  '@typescript-eslint/unbound-method'?: Linter.RuleEntry<TypescriptEslintUnboundMethod>
  /**
   * Disallow two overloads that could be unified into one with a union or an optional/rest parameter
   * @see https://typescript-eslint.io/rules/unified-signatures
   */
  '@typescript-eslint/unified-signatures'?: Linter.RuleEntry<TypescriptEslintUnifiedSignatures>
  '@typescript-eslint/use-unknown-in-catch-callback-variable'?: Linter.RuleEntry<[]>
  /**
   * Having line breaks styles to object, array and named imports
   * @see https://github.com/antfu/eslint-plugin-antfu/blob/main/src/rules/consistent-list-newline.md
   */
  'antfu/consistent-list-newline'?: Linter.RuleEntry<AntfuConsistentListNewline>
  'antfu/if-newline'?: Linter.RuleEntry<[]>
  'antfu/import-dedupe'?: Linter.RuleEntry<[]>
  'antfu/no-import-dist'?: Linter.RuleEntry<[]>
  'antfu/no-import-node-modules-by-path'?: Linter.RuleEntry<[]>
  'antfu/no-ts-export-equal'?: Linter.RuleEntry<[]>
  'antfu/top-level-function'?: Linter.RuleEntry<[]>
  /**
   * Use dprint to format code
   */
  'format/dprint'?: Linter.RuleEntry<FormatDprint>
  /**
   * Use Prettier to format code
   */
  'format/prettier'?: Linter.RuleEntry<FormatPrettier>
  'hyoban/no-extra-space-jsx-expression'?: Linter.RuleEntry<[]>
  'hyoban/prefer-early-return'?: Linter.RuleEntry<[]>
  /**
   * Enforce or ban the use of inline type-only markers for named imports.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/consistent-type-specifier-style.md
   */
  'import-x/consistent-type-specifier-style'?: Linter.RuleEntry<ImportXConsistentTypeSpecifierStyle>
  'import-x/default'?: Linter.RuleEntry<[]>
  /**
   * Enforce a leading comment with the webpackChunkName for dynamic imports.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/dynamic-import-chunkname.md
   */
  'import-x/dynamic-import-chunkname'?: Linter.RuleEntry<ImportXDynamicImportChunkname>
  'import-x/export'?: Linter.RuleEntry<[]>
  'import-x/exports-last'?: Linter.RuleEntry<[]>
  /**
   * Ensure consistent use of file extension within the import path.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/extensions.md
   */
  'import-x/extensions'?: Linter.RuleEntry<ImportXExtensions>
  /**
   * Ensure all imports appear before other statements.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/first.md
   */
  'import-x/first'?: Linter.RuleEntry<ImportXFirst>
  /**
   * Prefer named exports to be grouped together in a single export declaration.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/group-exports.md
   */
  'import-x/group-exports'?: Linter.RuleEntry<ImportXGroupExports>
  /**
   * Replaced by `import-x/first`.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md
   * @deprecated
   */
  'import-x/imports-first'?: Linter.RuleEntry<ImportXImportsFirst>
  /**
   * Enforce the maximum number of dependencies a module can have.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/max-dependencies.md
   */
  'import-x/max-dependencies'?: Linter.RuleEntry<ImportXMaxDependencies>
  /**
   * Ensure named imports correspond to a named export in the remote file.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/named.md
   */
  'import-x/named'?: Linter.RuleEntry<ImportXNamed>
  /**
   * Ensure imported namespaces contain dereferenced properties as they are dereferenced.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/namespace.md
   */
  'import-x/namespace'?: Linter.RuleEntry<ImportXNamespace>
  /**
   * Enforce a newline after import statements.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/newline-after-import.md
   */
  'import-x/newline-after-import'?: Linter.RuleEntry<ImportXNewlineAfterImport>
  /**
   * Forbid import of modules using absolute paths.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-absolute-path.md
   */
  'import-x/no-absolute-path'?: Linter.RuleEntry<ImportXNoAbsolutePath>
  'import-x/no-amd'?: Linter.RuleEntry<[]>
  /**
   * Forbid anonymous values as default exports.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-anonymous-default-export.md
   */
  'import-x/no-anonymous-default-export'?: Linter.RuleEntry<ImportXNoAnonymousDefaultExport>
  /**
   * Forbid CommonJS `require` calls and `module.exports` or `exports.*`.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-commonjs.md
   */
  'import-x/no-commonjs'?: Linter.RuleEntry<ImportXNoCommonjs>
  /**
   * Forbid a module from importing a module with a dependency path back to itself.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-cycle.md
   */
  'import-x/no-cycle'?: Linter.RuleEntry<ImportXNoCycle>
  'import-x/no-default-export'?: Linter.RuleEntry<[]>
  'import-x/no-deprecated'?: Linter.RuleEntry<[]>
  /**
   * Forbid repeated import of the same module in multiple places.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-duplicates.md
   */
  'import-x/no-duplicates'?: Linter.RuleEntry<ImportXNoDuplicates>
  /**
   * Forbid `require()` calls with expressions.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-dynamic-require.md
   */
  'import-x/no-dynamic-require'?: Linter.RuleEntry<ImportXNoDynamicRequire>
  'import-x/no-empty-named-blocks'?: Linter.RuleEntry<[]>
  /**
   * Forbid the use of extraneous packages.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-extraneous-dependencies.md
   */
  'import-x/no-extraneous-dependencies'?: Linter.RuleEntry<ImportXNoExtraneousDependencies>
  /**
   * Forbid import statements with CommonJS module.exports.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-import-module-exports.md
   */
  'import-x/no-import-module-exports'?: Linter.RuleEntry<ImportXNoImportModuleExports>
  /**
   * Forbid importing the submodules of other modules.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-internal-modules.md
   */
  'import-x/no-internal-modules'?: Linter.RuleEntry<ImportXNoInternalModules>
  'import-x/no-mutable-exports'?: Linter.RuleEntry<[]>
  'import-x/no-named-as-default'?: Linter.RuleEntry<[]>
  'import-x/no-named-as-default-member'?: Linter.RuleEntry<[]>
  'import-x/no-named-default'?: Linter.RuleEntry<[]>
  'import-x/no-named-export'?: Linter.RuleEntry<[]>
  /**
   * Forbid namespace (a.k.a. "wildcard" `*`) imports.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-namespace.md
   */
  'import-x/no-namespace'?: Linter.RuleEntry<ImportXNoNamespace>
  /**
   * Forbid Node.js builtin modules.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-nodejs-modules.md
   */
  'import-x/no-nodejs-modules'?: Linter.RuleEntry<ImportXNoNodejsModules>
  /**
   * Forbid importing packages through relative paths.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-relative-packages.md
   */
  'import-x/no-relative-packages'?: Linter.RuleEntry<ImportXNoRelativePackages>
  /**
   * Forbid importing modules from parent directories.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-relative-parent-imports.md
   */
  'import-x/no-relative-parent-imports'?: Linter.RuleEntry<ImportXNoRelativeParentImports>
  /**
   * Enforce which files can be imported in a given folder.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-restricted-paths.md
   */
  'import-x/no-restricted-paths'?: Linter.RuleEntry<ImportXNoRestrictedPaths>
  'import-x/no-self-import'?: Linter.RuleEntry<[]>
  /**
   * Forbid unassigned imports.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-unassigned-import.md
   */
  'import-x/no-unassigned-import'?: Linter.RuleEntry<ImportXNoUnassignedImport>
  /**
   * Ensure imports point to a file/module that can be resolved.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-unresolved.md
   */
  'import-x/no-unresolved'?: Linter.RuleEntry<ImportXNoUnresolved>
  /**
   * Forbid modules without exports, or exports without matching import in another module.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-unused-modules.md
   */
  'import-x/no-unused-modules'?: Linter.RuleEntry<ImportXNoUnusedModules>
  /**
   * Forbid unnecessary path segments in import and require statements.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/no-useless-path-segments.md
   */
  'import-x/no-useless-path-segments'?: Linter.RuleEntry<ImportXNoUselessPathSegments>
  'import-x/no-webpack-loader-syntax'?: Linter.RuleEntry<[]>
  /**
   * Enforce a convention in module import order.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/order.md
   */
  'import-x/order'?: Linter.RuleEntry<ImportXOrder>
  /**
   * Prefer a default export if module exports a single name or multiple names.
   * @see https://github.com/un-ts/eslint-plugin-import-x/blob/v0.4.4/docs/rules/prefer-default-export.md
   */
  'import-x/prefer-default-export'?: Linter.RuleEntry<ImportXPreferDefaultExport>
  'import-x/unambiguous'?: Linter.RuleEntry<[]>
  /**
   * enforce line breaks after opening and before closing array brackets
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html
   */
  'jsonc/array-bracket-newline'?: Linter.RuleEntry<JsoncArrayBracketNewline>
  /**
   * disallow or enforce spaces inside of brackets
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html
   */
  'jsonc/array-bracket-spacing'?: Linter.RuleEntry<JsoncArrayBracketSpacing>
  /**
   * enforce line breaks between array elements
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html
   */
  'jsonc/array-element-newline'?: Linter.RuleEntry<JsoncArrayElementNewline>
  'jsonc/auto'?: Linter.RuleEntry<[]>
  /**
   * require or disallow trailing commas
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html
   */
  'jsonc/comma-dangle'?: Linter.RuleEntry<JsoncCommaDangle>
  /**
   * enforce consistent comma style
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html
   */
  'jsonc/comma-style'?: Linter.RuleEntry<JsoncCommaStyle>
  /**
   * enforce consistent indentation
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html
   */
  'jsonc/indent'?: Linter.RuleEntry<JsoncIndent>
  /**
   * enforce naming convention to property key names
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html
   */
  'jsonc/key-name-casing'?: Linter.RuleEntry<JsoncKeyNameCasing>
  /**
   * enforce consistent spacing between keys and values in object literal properties
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html
   */
  'jsonc/key-spacing'?: Linter.RuleEntry<JsoncKeySpacing>
  'jsonc/no-bigint-literals'?: Linter.RuleEntry<[]>
  'jsonc/no-binary-expression'?: Linter.RuleEntry<[]>
  'jsonc/no-binary-numeric-literals'?: Linter.RuleEntry<[]>
  'jsonc/no-comments'?: Linter.RuleEntry<[]>
  'jsonc/no-dupe-keys'?: Linter.RuleEntry<[]>
  'jsonc/no-escape-sequence-in-identifier'?: Linter.RuleEntry<[]>
  'jsonc/no-floating-decimal'?: Linter.RuleEntry<[]>
  'jsonc/no-hexadecimal-numeric-literals'?: Linter.RuleEntry<[]>
  'jsonc/no-infinity'?: Linter.RuleEntry<[]>
  /**
   * disallow irregular whitespace
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html
   */
  'jsonc/no-irregular-whitespace'?: Linter.RuleEntry<JsoncNoIrregularWhitespace>
  'jsonc/no-multi-str'?: Linter.RuleEntry<[]>
  'jsonc/no-nan'?: Linter.RuleEntry<[]>
  'jsonc/no-number-props'?: Linter.RuleEntry<[]>
  'jsonc/no-numeric-separators'?: Linter.RuleEntry<[]>
  'jsonc/no-octal'?: Linter.RuleEntry<[]>
  'jsonc/no-octal-escape'?: Linter.RuleEntry<[]>
  'jsonc/no-octal-numeric-literals'?: Linter.RuleEntry<[]>
  'jsonc/no-parenthesized'?: Linter.RuleEntry<[]>
  'jsonc/no-plus-sign'?: Linter.RuleEntry<[]>
  'jsonc/no-regexp-literals'?: Linter.RuleEntry<[]>
  'jsonc/no-sparse-arrays'?: Linter.RuleEntry<[]>
  'jsonc/no-template-literals'?: Linter.RuleEntry<[]>
  'jsonc/no-undefined-value'?: Linter.RuleEntry<[]>
  'jsonc/no-unicode-codepoint-escapes'?: Linter.RuleEntry<[]>
  'jsonc/no-useless-escape'?: Linter.RuleEntry<[]>
  /**
   * enforce consistent line breaks inside braces
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html
   */
  'jsonc/object-curly-newline'?: Linter.RuleEntry<JsoncObjectCurlyNewline>
  /**
   * enforce consistent spacing inside braces
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html
   */
  'jsonc/object-curly-spacing'?: Linter.RuleEntry<JsoncObjectCurlySpacing>
  /**
   * enforce placing object properties on separate lines
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html
   */
  'jsonc/object-property-newline'?: Linter.RuleEntry<JsoncObjectPropertyNewline>
  /**
   * require quotes around object literal property names
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html
   */
  'jsonc/quote-props'?: Linter.RuleEntry<JsoncQuoteProps>
  /**
   * enforce use of double or single quotes
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html
   */
  'jsonc/quotes'?: Linter.RuleEntry<JsoncQuotes>
  /**
   * require array values to be sorted
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html
   */
  'jsonc/sort-array-values'?: Linter.RuleEntry<JsoncSortArrayValues>
  /**
   * require object keys to be sorted
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html
   */
  'jsonc/sort-keys'?: Linter.RuleEntry<JsoncSortKeys>
  /**
   * disallow spaces after unary operators
   * @see https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html
   */
  'jsonc/space-unary-ops'?: Linter.RuleEntry<JsoncSpaceUnaryOps>
  'jsonc/valid-json-number'?: Linter.RuleEntry<[]>
  'jsonc/vue-custom-block/no-parsing-error'?: Linter.RuleEntry<[]>
  /**
   * verifies the list of dependencies for Hooks like useEffect and similar
   * @see https://github.com/facebook/react/issues/14920
   */
  'react-hooks/exhaustive-deps'?: Linter.RuleEntry<ReactHooksExhaustiveDeps>
  'react-hooks/rules-of-hooks'?: Linter.RuleEntry<[]>
  'simple-import-sort/exports'?: Linter.RuleEntry<[]>
  /**
   * @see https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order
   */
  'simple-import-sort/imports'?: Linter.RuleEntry<SimpleImportSortImports>
  /**
   * Improve regexes by making them shorter, consistent, and safer.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/better-regex.md
   */
  'unicorn/better-regex'?: Linter.RuleEntry<UnicornBetterRegex>
  /**
   * Enforce a specific parameter name in catch clauses.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/catch-error-name.md
   */
  'unicorn/catch-error-name'?: Linter.RuleEntry<UnicornCatchErrorName>
  'unicorn/consistent-destructuring'?: Linter.RuleEntry<[]>
  /**
   * Move function definitions to the highest possible scope.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/consistent-function-scoping.md
   */
  'unicorn/consistent-function-scoping'?: Linter.RuleEntry<UnicornConsistentFunctionScoping>
  'unicorn/custom-error-definition'?: Linter.RuleEntry<[]>
  'unicorn/empty-brace-spaces'?: Linter.RuleEntry<[]>
  'unicorn/error-message'?: Linter.RuleEntry<[]>
  'unicorn/escape-case'?: Linter.RuleEntry<[]>
  /**
   * Add expiration conditions to TODO comments.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/expiring-todo-comments.md
   */
  'unicorn/expiring-todo-comments'?: Linter.RuleEntry<UnicornExpiringTodoComments>
  /**
   * Enforce explicitly comparing the `length` or `size` property of a value.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/explicit-length-check.md
   */
  'unicorn/explicit-length-check'?: Linter.RuleEntry<UnicornExplicitLengthCheck>
  /**
   * Enforce a case style for filenames.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/filename-case.md
   */
  'unicorn/filename-case'?: Linter.RuleEntry<UnicornFilenameCase>
  'unicorn/import-index'?: Linter.RuleEntry<[]>
  /**
   * Enforce specific import styles per module.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/import-style.md
   */
  'unicorn/import-style'?: Linter.RuleEntry<UnicornImportStyle>
  'unicorn/new-for-builtins'?: Linter.RuleEntry<[]>
  'unicorn/no-abusive-eslint-disable'?: Linter.RuleEntry<[]>
  'unicorn/no-array-callback-reference'?: Linter.RuleEntry<[]>
  'unicorn/no-array-for-each'?: Linter.RuleEntry<[]>
  'unicorn/no-array-instanceof'?: Linter.RuleEntry<[]>
  'unicorn/no-array-method-this-argument'?: Linter.RuleEntry<[]>
  /**
   * Enforce combining multiple `Array#push()` into one call.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-array-push-push.md
   */
  'unicorn/no-array-push-push'?: Linter.RuleEntry<UnicornNoArrayPushPush>
  /**
   * Disallow `Array#reduce()` and `Array#reduceRight()`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-array-reduce.md
   */
  'unicorn/no-array-reduce'?: Linter.RuleEntry<UnicornNoArrayReduce>
  'unicorn/no-await-expression-member'?: Linter.RuleEntry<[]>
  'unicorn/no-console-spaces'?: Linter.RuleEntry<[]>
  'unicorn/no-document-cookie'?: Linter.RuleEntry<[]>
  'unicorn/no-empty-file'?: Linter.RuleEntry<[]>
  'unicorn/no-fn-reference-in-iterator'?: Linter.RuleEntry<[]>
  'unicorn/no-for-loop'?: Linter.RuleEntry<[]>
  'unicorn/no-hex-escape'?: Linter.RuleEntry<[]>
  'unicorn/no-instanceof-array'?: Linter.RuleEntry<[]>
  'unicorn/no-invalid-remove-event-listener'?: Linter.RuleEntry<[]>
  /**
   * Disallow identifiers starting with `new` or `class`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-keyword-prefix.md
   */
  'unicorn/no-keyword-prefix'?: Linter.RuleEntry<UnicornNoKeywordPrefix>
  'unicorn/no-lonely-if'?: Linter.RuleEntry<[]>
  'unicorn/no-negated-condition'?: Linter.RuleEntry<[]>
  'unicorn/no-nested-ternary'?: Linter.RuleEntry<[]>
  'unicorn/no-new-array'?: Linter.RuleEntry<[]>
  'unicorn/no-new-buffer'?: Linter.RuleEntry<[]>
  /**
   * Disallow the use of the `null` literal.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-null.md
   */
  'unicorn/no-null'?: Linter.RuleEntry<UnicornNoNull>
  'unicorn/no-object-as-default-parameter'?: Linter.RuleEntry<[]>
  'unicorn/no-process-exit'?: Linter.RuleEntry<[]>
  'unicorn/no-reduce'?: Linter.RuleEntry<[]>
  'unicorn/no-static-only-class'?: Linter.RuleEntry<[]>
  'unicorn/no-thenable'?: Linter.RuleEntry<[]>
  'unicorn/no-this-assignment'?: Linter.RuleEntry<[]>
  /**
   * Disallow comparing `undefined` using `typeof`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-typeof-undefined.md
   */
  'unicorn/no-typeof-undefined'?: Linter.RuleEntry<UnicornNoTypeofUndefined>
  'unicorn/no-unnecessary-await'?: Linter.RuleEntry<[]>
  /**
   * Enforce the use of built-in methods instead of unnecessary polyfills.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-unnecessary-polyfills.md
   */
  'unicorn/no-unnecessary-polyfills'?: Linter.RuleEntry<UnicornNoUnnecessaryPolyfills>
  'unicorn/no-unreadable-array-destructuring'?: Linter.RuleEntry<[]>
  'unicorn/no-unreadable-iife'?: Linter.RuleEntry<[]>
  'unicorn/no-unsafe-regex'?: Linter.RuleEntry<[]>
  'unicorn/no-unused-properties'?: Linter.RuleEntry<[]>
  'unicorn/no-useless-fallback-in-spread'?: Linter.RuleEntry<[]>
  'unicorn/no-useless-length-check'?: Linter.RuleEntry<[]>
  'unicorn/no-useless-promise-resolve-reject'?: Linter.RuleEntry<[]>
  'unicorn/no-useless-spread'?: Linter.RuleEntry<[]>
  'unicorn/no-useless-switch-case'?: Linter.RuleEntry<[]>
  /**
   * Disallow useless `undefined`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/no-useless-undefined.md
   */
  'unicorn/no-useless-undefined'?: Linter.RuleEntry<UnicornNoUselessUndefined>
  'unicorn/no-zero-fractions'?: Linter.RuleEntry<[]>
  'unicorn/number-literal-case'?: Linter.RuleEntry<[]>
  /**
   * Enforce the style of numeric separators by correctly grouping digits.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/numeric-separators-style.md
   */
  'unicorn/numeric-separators-style'?: Linter.RuleEntry<UnicornNumericSeparatorsStyle>
  /**
   * Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-add-event-listener.md
   */
  'unicorn/prefer-add-event-listener'?: Linter.RuleEntry<UnicornPreferAddEventListener>
  /**
   * Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-array-find.md
   */
  'unicorn/prefer-array-find'?: Linter.RuleEntry<UnicornPreferArrayFind>
  /**
   * Prefer `Array#flat()` over legacy techniques to flatten arrays.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-array-flat.md
   */
  'unicorn/prefer-array-flat'?: Linter.RuleEntry<UnicornPreferArrayFlat>
  'unicorn/prefer-array-flat-map'?: Linter.RuleEntry<[]>
  'unicorn/prefer-array-index-of'?: Linter.RuleEntry<[]>
  'unicorn/prefer-array-some'?: Linter.RuleEntry<[]>
  /**
   * Prefer `.at()` method for index access and `String#charAt()`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-at.md
   */
  'unicorn/prefer-at'?: Linter.RuleEntry<UnicornPreferAt>
  'unicorn/prefer-blob-reading-methods'?: Linter.RuleEntry<[]>
  'unicorn/prefer-code-point'?: Linter.RuleEntry<[]>
  'unicorn/prefer-dataset'?: Linter.RuleEntry<[]>
  'unicorn/prefer-date-now'?: Linter.RuleEntry<[]>
  'unicorn/prefer-default-parameters'?: Linter.RuleEntry<[]>
  'unicorn/prefer-dom-node-append'?: Linter.RuleEntry<[]>
  'unicorn/prefer-dom-node-dataset'?: Linter.RuleEntry<[]>
  'unicorn/prefer-dom-node-remove'?: Linter.RuleEntry<[]>
  'unicorn/prefer-dom-node-text-content'?: Linter.RuleEntry<[]>
  'unicorn/prefer-event-key'?: Linter.RuleEntry<[]>
  'unicorn/prefer-event-target'?: Linter.RuleEntry<[]>
  'unicorn/prefer-exponentiation-operator'?: Linter.RuleEntry<[]>
  /**
   * Prefer `export…from` when re-exporting.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-export-from.md
   */
  'unicorn/prefer-export-from'?: Linter.RuleEntry<UnicornPreferExportFrom>
  'unicorn/prefer-flat-map'?: Linter.RuleEntry<[]>
  'unicorn/prefer-includes'?: Linter.RuleEntry<[]>
  'unicorn/prefer-json-parse-buffer'?: Linter.RuleEntry<[]>
  'unicorn/prefer-keyboard-event-key'?: Linter.RuleEntry<[]>
  'unicorn/prefer-logical-operator-over-ternary'?: Linter.RuleEntry<[]>
  'unicorn/prefer-math-trunc'?: Linter.RuleEntry<[]>
  'unicorn/prefer-modern-dom-apis'?: Linter.RuleEntry<[]>
  'unicorn/prefer-modern-math-apis'?: Linter.RuleEntry<[]>
  'unicorn/prefer-module'?: Linter.RuleEntry<[]>
  'unicorn/prefer-native-coercion-functions'?: Linter.RuleEntry<[]>
  'unicorn/prefer-negative-index'?: Linter.RuleEntry<[]>
  'unicorn/prefer-node-append'?: Linter.RuleEntry<[]>
  'unicorn/prefer-node-protocol'?: Linter.RuleEntry<[]>
  'unicorn/prefer-node-remove'?: Linter.RuleEntry<[]>
  /**
   * Prefer `Number` static properties over global ones.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-number-properties.md
   */
  'unicorn/prefer-number-properties'?: Linter.RuleEntry<UnicornPreferNumberProperties>
  /**
   * Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-object-from-entries.md
   */
  'unicorn/prefer-object-from-entries'?: Linter.RuleEntry<UnicornPreferObjectFromEntries>
  'unicorn/prefer-object-has-own'?: Linter.RuleEntry<[]>
  'unicorn/prefer-optional-catch-binding'?: Linter.RuleEntry<[]>
  'unicorn/prefer-prototype-methods'?: Linter.RuleEntry<[]>
  'unicorn/prefer-query-selector'?: Linter.RuleEntry<[]>
  'unicorn/prefer-reflect-apply'?: Linter.RuleEntry<[]>
  'unicorn/prefer-regexp-test'?: Linter.RuleEntry<[]>
  'unicorn/prefer-replace-all'?: Linter.RuleEntry<[]>
  'unicorn/prefer-set-has'?: Linter.RuleEntry<[]>
  'unicorn/prefer-set-size'?: Linter.RuleEntry<[]>
  'unicorn/prefer-spread'?: Linter.RuleEntry<[]>
  'unicorn/prefer-starts-ends-with'?: Linter.RuleEntry<[]>
  'unicorn/prefer-string-replace-all'?: Linter.RuleEntry<[]>
  'unicorn/prefer-string-slice'?: Linter.RuleEntry<[]>
  'unicorn/prefer-string-starts-ends-with'?: Linter.RuleEntry<[]>
  'unicorn/prefer-string-trim-start-end'?: Linter.RuleEntry<[]>
  /**
   * Prefer `switch` over multiple `else-if`.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-switch.md
   */
  'unicorn/prefer-switch'?: Linter.RuleEntry<UnicornPreferSwitch>
  /**
   * Prefer ternary expressions over simple `if-else` statements.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prefer-ternary.md
   */
  'unicorn/prefer-ternary'?: Linter.RuleEntry<UnicornPreferTernary>
  'unicorn/prefer-text-content'?: Linter.RuleEntry<[]>
  'unicorn/prefer-top-level-await'?: Linter.RuleEntry<[]>
  'unicorn/prefer-trim-start-end'?: Linter.RuleEntry<[]>
  'unicorn/prefer-type-error'?: Linter.RuleEntry<[]>
  /**
   * Prevent abbreviations.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/prevent-abbreviations.md
   */
  'unicorn/prevent-abbreviations'?: Linter.RuleEntry<UnicornPreventAbbreviations>
  'unicorn/regex-shorthand'?: Linter.RuleEntry<[]>
  /**
   * Enforce consistent relative URL style.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/relative-url-style.md
   */
  'unicorn/relative-url-style'?: Linter.RuleEntry<UnicornRelativeUrlStyle>
  'unicorn/require-array-join-separator'?: Linter.RuleEntry<[]>
  'unicorn/require-number-to-fixed-digits-argument'?: Linter.RuleEntry<[]>
  'unicorn/require-post-message-target-origin'?: Linter.RuleEntry<[]>
  /**
   * Enforce better string content.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/string-content.md
   */
  'unicorn/string-content'?: Linter.RuleEntry<UnicornStringContent>
  /**
   * Enforce consistent brace style for `case` clauses.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/switch-case-braces.md
   */
  'unicorn/switch-case-braces'?: Linter.RuleEntry<UnicornSwitchCaseBraces>
  /**
   * Fix whitespace-insensitive template indentation.
   * @see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v51.0.1/docs/rules/template-indent.md
   */
  'unicorn/template-indent'?: Linter.RuleEntry<UnicornTemplateIndent>
  'unicorn/text-encoding-identifier-case'?: Linter.RuleEntry<[]>
  'unicorn/throw-new-error'?: Linter.RuleEntry<[]>
}

/* ======= Declarations ======= */
// ----- @eslint-react/naming-convention/component-name -----
type _EslintReactNamingConventionComponentName0 = (("PascalCase" | "CONSTANT_CASE") | {
excepts?: string[]
rule?: ("PascalCase" | "CONSTANT_CASE")
})
type EslintReactNamingConventionComponentName = [_EslintReactNamingConventionComponentName0]
// ----- @eslint-react/naming-convention/filename -----
type _EslintReactNamingConventionFilename0 = (("PascalCase" | "camelCase" | "kebab-case" | "snake_case") | {
extensions?: string[]
excepts?: string[]
rule?: ("PascalCase" | "camelCase" | "kebab-case" | "snake_case")
})
type EslintReactNamingConventionFilename = [_EslintReactNamingConventionFilename0]
// ----- @eslint-react/naming-convention/filename-extension -----
type _EslintReactNamingConventionFilenameExtension0 = (("always" | "as-needed") | {
allow?: ("always" | "as-needed")
extensions?: string[]
})
type EslintReactNamingConventionFilenameExtension = [_EslintReactNamingConventionFilenameExtension0]
// ----- @next/next/no-html-link-for-pages -----
type _NextNextNoHtmlLinkForPages0 = (string | string[])
type NextNextNoHtmlLinkForPages = [_NextNextNoHtmlLinkForPages0]
// ----- @stylistic/array-bracket-newline -----
type _StylisticArrayBracketNewline0 = (("always" | "never" | "consistent") | {
multiline?: boolean
minItems?: (number | null)
})
type StylisticArrayBracketNewline = [_StylisticArrayBracketNewline0]
// ----- @stylistic/array-bracket-spacing -----
type _StylisticArrayBracketSpacing0 = ("always" | "never")
interface _StylisticArrayBracketSpacing1 {
singleValue?: boolean
objectsInArrays?: boolean
arraysInArrays?: boolean
}
type StylisticArrayBracketSpacing = [_StylisticArrayBracketSpacing0, _StylisticArrayBracketSpacing1]
// ----- @stylistic/array-element-newline -----
type StylisticArrayElementNewline = []|[(BasicConfig | {
ArrayExpression?: BasicConfig
ArrayPattern?: BasicConfig
})]
type BasicConfig = (("always" | "never" | "consistent") | {
multiline?: boolean
minItems?: (number | null)
})
type StylisticArrayElementNewline = StylisticArrayElementNewline[]
// ----- @stylistic/arrow-parens -----
type _StylisticArrowParens0 = ("always" | "as-needed")
interface _StylisticArrowParens1 {
requireForBlockBody?: boolean
}
type StylisticArrowParens = [_StylisticArrowParens0, _StylisticArrowParens1]
// ----- @stylistic/arrow-spacing -----
interface _StylisticArrowSpacing0 {
before?: boolean
after?: boolean
}
type StylisticArrowSpacing = [_StylisticArrowSpacing0]
// ----- @stylistic/block-spacing -----
type _StylisticBlockSpacing0 = ("always" | "never")
type StylisticBlockSpacing = [_StylisticBlockSpacing0]
// ----- @stylistic/brace-style -----
type _StylisticBraceStyle0 = ("1tbs" | "stroustrup" | "allman")
interface _StylisticBraceStyle1 {
allowSingleLine?: boolean
}
type StylisticBraceStyle = [_StylisticBraceStyle0, _StylisticBraceStyle1]
// ----- @stylistic/comma-dangle -----
type StylisticCommaDangle = []|[(Value | {
arrays?: ValueWithIgnore
objects?: ValueWithIgnore
imports?: ValueWithIgnore
exports?: ValueWithIgnore
functions?: ValueWithIgnore
enums?: ValueWithIgnore
generics?: ValueWithIgnore
tuples?: ValueWithIgnore
})]
type Value = ("always-multiline" | "always" | "never" | "only-multiline")
type ValueWithIgnore = ("always-multiline" | "always" | "never" | "only-multiline" | "ignore")
type StylisticCommaDangle = StylisticCommaDangle[]
// ----- @stylistic/comma-spacing -----
interface _StylisticCommaSpacing0 {
before?: boolean
after?: boolean
}
type StylisticCommaSpacing = [_StylisticCommaSpacing0]
// ----- @stylistic/comma-style -----
type _StylisticCommaStyle0 = ("first" | "last")
interface _StylisticCommaStyle1 {
exceptions?: {
[k: string]: boolean
}
}
type StylisticCommaStyle = [_StylisticCommaStyle0, _StylisticCommaStyle1]
// ----- @stylistic/computed-property-spacing -----
type _StylisticComputedPropertySpacing0 = ("always" | "never")
interface _StylisticComputedPropertySpacing1 {
enforceForClassMembers?: boolean
}
type StylisticComputedPropertySpacing = [_StylisticComputedPropertySpacing0, _StylisticComputedPropertySpacing1]
// ----- @stylistic/dot-location -----
type _StylisticDotLocation0 = ("object" | "property")
type StylisticDotLocation = [_StylisticDotLocation0]
// ----- @stylistic/eol-last -----
type _StylisticEolLast0 = ("always" | "never" | "unix" | "windows")
type StylisticEolLast = [_StylisticEolLast0]
// ----- @stylistic/func-call-spacing -----
type StylisticFuncCallSpacing = ([]|["never"] | []|["always"]|["always", {
allowNewlines?: boolean
}])
type StylisticFuncCallSpacing = StylisticFuncCallSpacing[]
// ----- @stylistic/function-call-argument-newline -----
type _StylisticFunctionCallArgumentNewline0 = ("always" | "never" | "consistent")
type StylisticFunctionCallArgumentNewline = [_StylisticFunctionCallArgumentNewline0]
// ----- @stylistic/function-call-spacing -----
type StylisticFunctionCallSpacing = ([]|["never"] | []|["always"]|["always", {
allowNewlines?: boolean
}])
type StylisticFunctionCallSpacing = StylisticFunctionCallSpacing[]
// ----- @stylistic/function-paren-newline -----
type _StylisticFunctionParenNewline0 = (("always" | "never" | "consistent" | "multiline" | "multiline-arguments") | {
minItems?: number
})
type StylisticFunctionParenNewline = [_StylisticFunctionParenNewline0]
// ----- @stylistic/generator-star-spacing -----
type _StylisticGeneratorStarSpacing0 = (("before" | "after" | "both" | "neither") | {
before?: boolean
after?: boolean
named?: (("before" | "after" | "both" | "neither") | {
before?: boolean
after?: boolean
})
anonymous?: (("before" | "after" | "both" | "neither") | {
before?: boolean
after?: boolean
})
method?: (("before" | "after" | "both" | "neither") | {
before?: boolean
after?: boolean
})
})
type StylisticGeneratorStarSpacing = [_StylisticGeneratorStarSpacing0]
// ----- @stylistic/implicit-arrow-linebreak -----
type _StylisticImplicitArrowLinebreak0 = ("beside" | "below")
type StylisticImplicitArrowLinebreak = [_StylisticImplicitArrowLinebreak0]
// ----- @stylistic/indent -----
type _StylisticIndent0 = ("tab" | number)
interface _StylisticIndent1 {
SwitchCase?: number
VariableDeclarator?: ((number | ("first" | "off")) | {
var?: (number | ("first" | "off"))
let?: (number | ("first" | "off"))
const?: (number | ("first" | "off"))
})
outerIIFEBody?: (number | "off")
MemberExpression?: (number | "off")
FunctionDeclaration?: {
parameters?: (number | ("first" | "off"))
body?: number
}
FunctionExpression?: {
parameters?: (number | ("first" | "off"))
body?: number
}
StaticBlock?: {
body?: number
}
CallExpression?: {
arguments?: (number | ("first" | "off"))
}
ArrayExpression?: (number | ("first" | "off"))
ObjectExpression?: (number | ("first" | "off"))
ImportDeclaration?: (number | ("first" | "off"))
flatTernaryExpressions?: boolean
offsetTernaryExpressions?: boolean
ignoredNodes?: string[]
ignoreComments?: boolean
}
type StylisticIndent = [_StylisticIndent0, _StylisticIndent1]
// ----- @stylistic/indent-binary-ops -----
type _StylisticIndentBinaryOps0 = (number | "tab")
type StylisticIndentBinaryOps = [_StylisticIndentBinaryOps0]
// ----- @stylistic/jsx-closing-bracket-location -----
type _StylisticJsxClosingBracketLocation0 = (("after-props" | "props-aligned" | "tag-aligned" | "line-aligned") | {
location?: ("after-props" | "props-aligned" | "tag-aligned" | "line-aligned")
} | {
nonEmpty?: (("after-props" | "props-aligned" | "tag-aligned" | "line-aligned") | false)
selfClosing?: (("after-props" | "props-aligned" | "tag-aligned" | "line-aligned") | false)
})
type StylisticJsxClosingBracketLocation = [_StylisticJsxClosingBracketLocation0]
// ----- @stylistic/jsx-curly-brace-presence -----
type _StylisticJsxCurlyBracePresence0 = ({
props?: ("always" | "never" | "ignore")
children?: ("always" | "never" | "ignore")
propElementValues?: ("always" | "never" | "ignore")
} | ("always" | "never" | "ignore"))
type StylisticJsxCurlyBracePresence = [_StylisticJsxCurlyBracePresence0]
// ----- @stylistic/jsx-curly-newline -----
type _StylisticJsxCurlyNewline0 = (("consistent" | "never") | {
singleline?: ("consistent" | "require" | "forbid")
multiline?: ("consistent" | "require" | "forbid")
})
type StylisticJsxCurlyNewline = [_StylisticJsxCurlyNewline0]
// ----- @stylistic/jsx-curly-spacing -----
type StylisticJsxCurlySpacing = []|[((BasicConfig & {
attributes?: BasicConfigOrBoolean
children?: BasicConfigOrBoolean
[k: string]: unknown
}) | ("always" | "never"))]|[((BasicConfig & {
attributes?: BasicConfigOrBoolean
children?: BasicConfigOrBoolean
[k: string]: unknown
}) | ("always" | "never")), {
allowMultiline?: boolean
spacing?: {
objectLiterals?: ("always" | "never")
[k: string]: unknown
}
}]
type BasicConfigOrBoolean = (BasicConfig | boolean)
interface BasicConfig {
when?: ("always" | "never")
allowMultiline?: boolean
spacing?: {
objectLiterals?: ("always" | "never")
[k: string]: unknown
}
[k: string]: unknown
}
type StylisticJsxCurlySpacing = StylisticJsxCurlySpacing[]
// ----- @stylistic/jsx-equals-spacing -----
type _StylisticJsxEqualsSpacing0 = ("always" | "never")
type StylisticJsxEqualsSpacing = [_StylisticJsxEqualsSpacing0]
// ----- @stylistic/jsx-first-prop-new-line -----
type _StylisticJsxFirstPropNewLine0 = ("always" | "never" | "multiline" | "multiline-multiprop" | "multiprop")
type StylisticJsxFirstPropNewLine = [_StylisticJsxFirstPropNewLine0]
// ----- @stylistic/jsx-indent -----
type _StylisticJsxIndent0 = ("tab" | number)
interface _StylisticJsxIndent1 {
checkAttributes?: boolean
indentLogicalExpressions?: boolean
}
type StylisticJsxIndent = [_StylisticJsxIndent0, _StylisticJsxIndent1]
// ----- @stylistic/jsx-indent-props -----
type _StylisticJsxIndentProps0 = (("tab" | "first") | number | {
indentMode?: (("tab" | "first") | number)
ignoreTernaryOperator?: boolean
[k: string]: unknown
})
type StylisticJsxIndentProps = [_StylisticJsxIndentProps0]
// ----- @stylistic/jsx-max-props-per-line -----
type _StylisticJsxMaxPropsPerLine0 = ({
maximum?: {
single?: number
multi?: number
[k: string]: unknown
}
} | {
maximum?: number
when?: ("always" | "multiline")
})
type StylisticJsxMaxPropsPerLine = [_StylisticJsxMaxPropsPerLine0]
// ----- @stylistic/jsx-newline -----
interface _StylisticJsxNewline0 {
prevent?: boolean
allowMultilines?: boolean
}
type StylisticJsxNewline = [_StylisticJsxNewline0]
// ----- @stylistic/jsx-one-expression-per-line -----
interface _StylisticJsxOneExpressionPerLine0 {
allow?: ("none" | "literal" | "single-child")
}
type StylisticJsxOneExpressionPerLine = [_StylisticJsxOneExpressionPerLine0]
// ----- @stylistic/jsx-pascal-case -----
interface _StylisticJsxPascalCase0 {
allowAllCaps?: boolean
allowLeadingUnderscore?: boolean
allowNamespace?: boolean
ignore?: string[]
}
type StylisticJsxPascalCase = [_StylisticJsxPascalCase0]
// ----- @stylistic/jsx-quotes -----
type _StylisticJsxQuotes0 = ("prefer-single" | "prefer-double")
type StylisticJsxQuotes = [_StylisticJsxQuotes0]
// ----- @stylistic/jsx-self-closing-comp -----
interface _StylisticJsxSelfClosingComp0 {
component?: boolean
html?: boolean
}
type StylisticJsxSelfClosingComp = [_StylisticJsxSelfClosingComp0]
// ----- @stylistic/jsx-sort-props -----
interface _StylisticJsxSortProps0 {
callbacksLast?: boolean
shorthandFirst?: boolean
shorthandLast?: boolean
multiline?: ("ignore" | "first" | "last")
ignoreCase?: boolean
noSortAlphabetically?: boolean
reservedFirst?: (unknown[] | boolean)
locale?: string
}
type StylisticJsxSortProps = [_StylisticJsxSortProps0]
// ----- @stylistic/jsx-tag-spacing -----
interface _StylisticJsxTagSpacing0 {
closingSlash?: ("always" | "never" | "allow")
beforeSelfClosing?: ("always" | "proportional-always" | "never" | "allow")
afterOpening?: ("always" | "allow-multiline" | "never" | "allow")
beforeClosing?: ("always" | "proportional-always" | "never" | "allow")
}
type StylisticJsxTagSpacing = [_StylisticJsxTagSpacing0]
// ----- @stylistic/jsx-wrap-multilines -----
interface _StylisticJsxWrapMultilines0 {
declaration?: (true | false | "ignore" | "parens" | "parens-new-line")
assignment?: (true | false | "ignore" | "parens" | "parens-new-line")
return?: (true | false | "ignore" | "parens" | "parens-new-line")
arrow?: (true | false | "ignore" | "parens" | "parens-new-line")
condition?: (true | false | "ignore" | "parens" | "parens-new-line")
logical?: (true | false | "ignore" | "parens" | "parens-new-line")
prop?: (true | false | "ignore" | "parens" | "parens-new-line")
}
type StylisticJsxWrapMultilines = [_StylisticJsxWrapMultilines0]
// ----- @stylistic/key-spacing -----
type _StylisticKeySpacing0 = ({
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
align?: {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
}
})
type StylisticKeySpacing = [_StylisticKeySpacing0]
// ----- @stylistic/keyword-spacing -----
interface _StylisticKeywordSpacing0 {
before?: boolean
after?: boolean
overrides?: {
abstract?: {
before?: boolean
after?: boolean
}
as?: {
before?: boolean
after?: boolean
}
async?: {
before?: boolean
after?: boolean
}
await?: {
before?: boolean
after?: boolean
}
boolean?: {
before?: boolean
after?: boolean
}
break?: {
before?: boolean
after?: boolean
}
byte?: {
before?: boolean
after?: boolean
}
case?: {
before?: boolean
after?: boolean
}
catch?: {
before?: boolean
after?: boolean
}
char?: {
before?: boolean
after?: boolean
}
class?: {
before?: boolean
after?: boolean
}
const?: {
before?: boolean
after?: boolean
}
continue?: {
before?: boolean
after?: boolean
}
debugger?: {
before?: boolean
after?: boolean
}
default?: {
before?: boolean
after?: boolean
}
delete?: {
before?: boolean
after?: boolean
}
do?: {
before?: boolean
after?: boolean
}
double?: {
before?: boolean
after?: boolean
}
else?: {
before?: boolean
after?: boolean
}
enum?: {
before?: boolean
after?: boolean
}
export?: {
before?: boolean
after?: boolean
}
extends?: {
before?: boolean
after?: boolean
}
false?: {
before?: boolean
after?: boolean
}
final?: {
before?: boolean
after?: boolean
}
finally?: {
before?: boolean
after?: boolean
}
float?: {
before?: boolean
after?: boolean
}
for?: {
before?: boolean
after?: boolean
}
from?: {
before?: boolean
after?: boolean
}
function?: {
before?: boolean
after?: boolean
}
get?: {
before?: boolean
after?: boolean
}
goto?: {
before?: boolean
after?: boolean
}
if?: {
before?: boolean
after?: boolean
}
implements?: {
before?: boolean
after?: boolean
}
import?: {
before?: boolean
after?: boolean
}
in?: {
before?: boolean
after?: boolean
}
instanceof?: {
before?: boolean
after?: boolean
}
int?: {
before?: boolean
after?: boolean
}
interface?: {
before?: boolean
after?: boolean
}
let?: {
before?: boolean
after?: boolean
}
long?: {
before?: boolean
after?: boolean
}
native?: {
before?: boolean
after?: boolean
}
new?: {
before?: boolean
after?: boolean
}
null?: {
before?: boolean
after?: boolean
}
of?: {
before?: boolean
after?: boolean
}
package?: {
before?: boolean
after?: boolean
}
private?: {
before?: boolean
after?: boolean
}
protected?: {
before?: boolean
after?: boolean
}
public?: {
before?: boolean
after?: boolean
}
return?: {
before?: boolean
after?: boolean
}
set?: {
before?: boolean
after?: boolean
}
short?: {
before?: boolean
after?: boolean
}
static?: {
before?: boolean
after?: boolean
}
super?: {
before?: boolean
after?: boolean
}
switch?: {
before?: boolean
after?: boolean
}
synchronized?: {
before?: boolean
after?: boolean
}
this?: {
before?: boolean
after?: boolean
}
throw?: {
before?: boolean
after?: boolean
}
throws?: {
before?: boolean
after?: boolean
}
transient?: {
before?: boolean
after?: boolean
}
true?: {
before?: boolean
after?: boolean
}
try?: {
before?: boolean
after?: boolean
}
typeof?: {
before?: boolean
after?: boolean
}
var?: {
before?: boolean
after?: boolean
}
void?: {
before?: boolean
after?: boolean
}
volatile?: {
before?: boolean
after?: boolean
}
while?: {
before?: boolean
after?: boolean
}
with?: {
before?: boolean
after?: boolean
}
yield?: {
before?: boolean
after?: boolean
}
type?: {
before?: boolean
after?: boolean
}
}
}
type StylisticKeywordSpacing = [_StylisticKeywordSpacing0]
// ----- @stylistic/linebreak-style -----
type _StylisticLinebreakStyle0 = ("unix" | "windows")
type StylisticLinebreakStyle = [_StylisticLinebreakStyle0]
// ----- @stylistic/lines-around-comment -----
interface _StylisticLinesAroundComment0 {
beforeBlockComment?: boolean
afterBlockComment?: boolean
beforeLineComment?: boolean
afterLineComment?: boolean
allowBlockStart?: boolean
allowBlockEnd?: boolean
allowClassStart?: boolean
allowClassEnd?: boolean
allowObjectStart?: boolean
allowObjectEnd?: boolean
allowArrayStart?: boolean
allowArrayEnd?: boolean
allowInterfaceStart?: boolean
allowInterfaceEnd?: boolean
allowTypeStart?: boolean
allowTypeEnd?: boolean
allowEnumStart?: boolean
allowEnumEnd?: boolean
allowModuleStart?: boolean
allowModuleEnd?: boolean
ignorePattern?: string
applyDefaultIgnorePatterns?: boolean
afterHashbangComment?: boolean
}
type StylisticLinesAroundComment = [_StylisticLinesAroundComment0]
// ----- @stylistic/lines-between-class-members -----
type _StylisticLinesBetweenClassMembers0 = ({
enforce: [{
blankLine: ("always" | "never")
prev: ("method" | "field" | "*")
next: ("method" | "field" | "*")
}, ...({
blankLine: ("always" | "never")
prev: ("method" | "field" | "*")
next: ("method" | "field" | "*")
})[]]
} | ("always" | "never"))
interface _StylisticLinesBetweenClassMembers1 {
exceptAfterSingleLine?: boolean
exceptAfterOverload?: boolean
}
type StylisticLinesBetweenClassMembers = [_StylisticLinesBetweenClassMembers0, _StylisticLinesBetweenClassMembers1]
// ----- @stylistic/max-len -----
type _StylisticMaxLen0 = ({
code?: number
comments?: number
tabWidth?: number
ignorePattern?: string
ignoreComments?: boolean
ignoreStrings?: boolean
ignoreUrls?: boolean
ignoreTemplateLiterals?: boolean
ignoreRegExpLiterals?: boolean
ignoreTrailingComments?: boolean
} | number)
type _StylisticMaxLen1 = ({
code?: number
comments?: number
tabWidth?: number
ignorePattern?: string
ignoreComments?: boolean
ignoreStrings?: boolean
ignoreUrls?: boolean
ignoreTemplateLiterals?: boolean
ignoreRegExpLiterals?: boolean
ignoreTrailingComments?: boolean
} | number)
interface _StylisticMaxLen2 {
code?: number
comments?: number
tabWidth?: number
ignorePattern?: string
ignoreComments?: boolean
ignoreStrings?: boolean
ignoreUrls?: boolean
ignoreTemplateLiterals?: boolean
ignoreRegExpLiterals?: boolean
ignoreTrailingComments?: boolean
}
type StylisticMaxLen = [_StylisticMaxLen0, _StylisticMaxLen1, _StylisticMaxLen2]
// ----- @stylistic/max-statements-per-line -----
interface _StylisticMaxStatementsPerLine0 {
max?: number
}
type StylisticMaxStatementsPerLine = [_StylisticMaxStatementsPerLine0]
// ----- @stylistic/member-delimiter-style -----
type MultiLineOption = ("none" | "semi" | "comma")
type SingleLineOption = ("semi" | "comma")
interface _StylisticMemberDelimiterStyle0 {
multiline?: {
delimiter?: MultiLineOption
requireLast?: boolean
}
singleline?: {
delimiter?: SingleLineOption
requireLast?: boolean
}
overrides?: {
interface?: DelimiterConfig
typeLiteral?: DelimiterConfig
}
multilineDetection?: ("brackets" | "last-member")
}
interface DelimiterConfig {
multiline?: {
delimiter?: MultiLineOption
requireLast?: boolean
}
singleline?: {
delimiter?: SingleLineOption
requireLast?: boolean
}
}
type StylisticMemberDelimiterStyle = [_StylisticMemberDelimiterStyle0]
// ----- @stylistic/multiline-ternary -----
type _StylisticMultilineTernary0 = ("always" | "always-multiline" | "never")
interface _StylisticMultilineTernary1 {
ignoreJSX?: boolean
[k: string]: unknown
}
type StylisticMultilineTernary = [_StylisticMultilineTernary0, _StylisticMultilineTernary1]
// ----- @stylistic/new-parens -----
type _StylisticNewParens0 = ("always" | "never")
type StylisticNewParens = [_StylisticNewParens0]
// ----- @stylistic/newline-per-chained-call -----
interface _StylisticNewlinePerChainedCall0 {
ignoreChainWithDepth?: number
}
type StylisticNewlinePerChainedCall = [_StylisticNewlinePerChainedCall0]
// ----- @stylistic/no-confusing-arrow -----
interface _StylisticNoConfusingArrow0 {
allowParens?: boolean
onlyOneSimpleParam?: boolean
}
type StylisticNoConfusingArrow = [_StylisticNoConfusingArrow0]
// ----- @stylistic/no-extra-parens -----
type StylisticNoExtraParens = ([]|["functions"] | []|["all"]|["all", {
conditionalAssign?: boolean
ternaryOperandBinaryExpressions?: boolean
nestedBinaryExpressions?: boolean
returnAssign?: boolean
ignoreJSX?: ("none" | "all" | "single-line" | "multi-line")
enforceForArrowConditionals?: boolean
enforceForSequenceExpressions?: boolean
enforceForNewInMemberExpressions?: boolean
enforceForFunctionPrototypeMethods?: boolean
allowParensAfterCommentPattern?: string
}])
type StylisticNoExtraParens = StylisticNoExtraParens[]
// ----- @stylistic/no-mixed-operators -----
interface _StylisticNoMixedOperators0 {
groups?: [("+" | "-" | "*" | "/" | "%" | "**" | "&" | "|" | "^" | "~" | "<<" | ">>" | ">>>" | "==" | "!=" | "===" | "!==" | ">" | ">=" | "<" | "<=" | "&&" | "||" | "in" | "instanceof" | "?:" | "??"), ("+" | "-" | "*" | "/" | "%" | "**" | "&" | "|" | "^" | "~" | "<<" | ">>" | ">>>" | "==" | "!=" | "===" | "!==" | ">" | ">=" | "<" | "<=" | "&&" | "||" | "in" | "instanceof" | "?:" | "??"), ...(("+" | "-" | "*" | "/" | "%" | "**" | "&" | "|" | "^" | "~" | "<<" | ">>" | ">>>" | "==" | "!=" | "===" | "!==" | ">" | ">=" | "<" | "<=" | "&&" | "||" | "in" | "instanceof" | "?:" | "??"))[]][]
allowSamePrecedence?: boolean
}
type StylisticNoMixedOperators = [_StylisticNoMixedOperators0]
// ----- @stylistic/no-mixed-spaces-and-tabs -----
type _StylisticNoMixedSpacesAndTabs0 = ("smart-tabs" | boolean)
type StylisticNoMixedSpacesAndTabs = [_StylisticNoMixedSpacesAndTabs0]
// ----- @stylistic/no-multi-spaces -----
interface _StylisticNoMultiSpaces0 {
exceptions?: {
[k: string]: boolean
}
ignoreEOLComments?: boolean
includeTabs?: boolean
}
type StylisticNoMultiSpaces = [_StylisticNoMultiSpaces0]
// ----- @stylistic/no-multiple-empty-lines -----
interface _StylisticNoMultipleEmptyLines0 {
max: number
maxEOF?: number
maxBOF?: number
}
type StylisticNoMultipleEmptyLines = [_StylisticNoMultipleEmptyLines0]
// ----- @stylistic/no-tabs -----
interface _StylisticNoTabs0 {
allowIndentationTabs?: boolean
}
type StylisticNoTabs = [_StylisticNoTabs0]
// ----- @stylistic/no-trailing-spaces -----
interface _StylisticNoTrailingSpaces0 {
skipBlankLines?: boolean
ignoreComments?: boolean
}
type StylisticNoTrailingSpaces = [_StylisticNoTrailingSpaces0]
// ----- @stylistic/nonblock-statement-body-position -----
type _StylisticNonblockStatementBodyPosition0 = ("beside" | "below" | "any")
interface _StylisticNonblockStatementBodyPosition1 {
overrides?: {
if?: ("beside" | "below" | "any")
else?: ("beside" | "below" | "any")
while?: ("beside" | "below" | "any")
do?: ("beside" | "below" | "any")
for?: ("beside" | "below" | "any")
}
}
type StylisticNonblockStatementBodyPosition = [_StylisticNonblockStatementBodyPosition0, _StylisticNonblockStatementBodyPosition1]
// ----- @stylistic/object-curly-newline -----
type _StylisticObjectCurlyNewline0 = ((("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
}) | {
ObjectExpression?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
ObjectPattern?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
ImportDeclaration?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
ExportDeclaration?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
})
type StylisticObjectCurlyNewline = [_StylisticObjectCurlyNewline0]
// ----- @stylistic/object-curly-spacing -----
type _StylisticObjectCurlySpacing0 = ("always" | "never")
interface _StylisticObjectCurlySpacing1 {
arraysInObjects?: boolean
objectsInObjects?: boolean
}
type StylisticObjectCurlySpacing = [_StylisticObjectCurlySpacing0, _StylisticObjectCurlySpacing1]
// ----- @stylistic/object-property-newline -----
interface _StylisticObjectPropertyNewline0 {
allowAllPropertiesOnSameLine?: boolean
allowMultiplePropertiesPerLine?: boolean
}
type StylisticObjectPropertyNewline = [_StylisticObjectPropertyNewline0]
// ----- @stylistic/one-var-declaration-per-line -----
type _StylisticOneVarDeclarationPerLine0 = ("always" | "initializations")
type StylisticOneVarDeclarationPerLine = [_StylisticOneVarDeclarationPerLine0]
// ----- @stylistic/operator-linebreak -----
type _StylisticOperatorLinebreak0 = (("after" | "before" | "none") | null)
interface _StylisticOperatorLinebreak1 {
overrides?: {
[k: string]: ("after" | "before" | "none" | "ignore")
}
}
type StylisticOperatorLinebreak = [_StylisticOperatorLinebreak0, _StylisticOperatorLinebreak1]
// ----- @stylistic/padded-blocks -----
type _StylisticPaddedBlocks0 = (("always" | "never") | {
blocks?: ("always" | "never")
switches?: ("always" | "never")
classes?: ("always" | "never")
})
interface _StylisticPaddedBlocks1 {
allowSingleLineBlocks?: boolean
}
type StylisticPaddedBlocks = [_StylisticPaddedBlocks0, _StylisticPaddedBlocks1]
// ----- @stylistic/padding-line-between-statements -----
type PaddingType = ("any" | "never" | "always")
type StatementType = (("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "cjs-export" | "cjs-import" | "interface" | "type" | "function-overload") | [("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "cjs-export" | "cjs-import" | "interface" | "type" | "function-overload"), ...(("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "cjs-export" | "cjs-import" | "interface" | "type" | "function-overload"))[]])
type StylisticPaddingLineBetweenStatements = {
blankLine: PaddingType
prev: StatementType
next: StatementType
}[]
type StylisticPaddingLineBetweenStatements = StylisticPaddingLineBetweenStatements[]
// ----- @stylistic/quote-props -----
type StylisticQuoteProps = ([]|[("always" | "as-needed" | "consistent" | "consistent-as-needed")] | []|[("always" | "as-needed" | "consistent" | "consistent-as-needed")]|[("always" | "as-needed" | "consistent" | "consistent-as-needed"), {
keywords?: boolean
unnecessary?: boolean
numbers?: boolean
}])
type StylisticQuoteProps = StylisticQuoteProps[]
// ----- @stylistic/quotes -----
type _StylisticQuotes0 = ("single" | "double" | "backtick")
type _StylisticQuotes1 = ("avoid-escape" | {
avoidEscape?: boolean
allowTemplateLiterals?: boolean
})
type StylisticQuotes = [_StylisticQuotes0, _StylisticQuotes1]
// ----- @stylistic/rest-spread-spacing -----
type _StylisticRestSpreadSpacing0 = ("always" | "never")
type StylisticRestSpreadSpacing = [_StylisticRestSpreadSpacing0]
// ----- @stylistic/semi -----
type StylisticSemi = ([]|["never"]|["never", {
beforeStatementContinuationChars?: ("always" | "any" | "never")
}] | []|["always"]|["always", {
omitLastInOneLineBlock?: boolean
omitLastInOneLineClassBody?: boolean
}])
type StylisticSemi = StylisticSemi[]
// ----- @stylistic/semi-spacing -----
interface _StylisticSemiSpacing0 {
before?: boolean
after?: boolean
}
type StylisticSemiSpacing = [_StylisticSemiSpacing0]
// ----- @stylistic/semi-style -----
type _StylisticSemiStyle0 = ("last" | "first")
type StylisticSemiStyle = [_StylisticSemiStyle0]
// ----- @stylistic/space-before-blocks -----
type _StylisticSpaceBeforeBlocks0 = (("always" | "never") | {
keywords?: ("always" | "never" | "off")
functions?: ("always" | "never" | "off")
classes?: ("always" | "never" | "off")
})
type StylisticSpaceBeforeBlocks = [_StylisticSpaceBeforeBlocks0]
// ----- @stylistic/space-before-function-paren -----
type _StylisticSpaceBeforeFunctionParen0 = (("always" | "never") | {
anonymous?: ("always" | "never" | "ignore")
named?: ("always" | "never" | "ignore")
asyncArrow?: ("always" | "never" | "ignore")
})
type StylisticSpaceBeforeFunctionParen = [_StylisticSpaceBeforeFunctionParen0]
// ----- @stylistic/space-in-parens -----
type _StylisticSpaceInParens0 = ("always" | "never")
interface _StylisticSpaceInParens1 {
exceptions?: ("{}" | "[]" | "()" | "empty")[]
}
type StylisticSpaceInParens = [_StylisticSpaceInParens0, _StylisticSpaceInParens1]
// ----- @stylistic/space-infix-ops -----
interface _StylisticSpaceInfixOps0 {
int32Hint?: boolean
}
type StylisticSpaceInfixOps = [_StylisticSpaceInfixOps0]
// ----- @stylistic/space-unary-ops -----
interface _StylisticSpaceUnaryOps0 {
words?: boolean
nonwords?: boolean
overrides?: {
[k: string]: boolean
}
}
type StylisticSpaceUnaryOps = [_StylisticSpaceUnaryOps0]
// ----- @stylistic/spaced-comment -----
type _StylisticSpacedComment0 = ("always" | "never")
interface _StylisticSpacedComment1 {
exceptions?: string[]
markers?: string[]
line?: {
exceptions?: string[]
markers?: string[]
}
block?: {
exceptions?: string[]
markers?: string[]
balanced?: boolean
}
}
type StylisticSpacedComment = [_StylisticSpacedComment0, _StylisticSpacedComment1]
// ----- @stylistic/switch-colon-spacing -----
interface _StylisticSwitchColonSpacing0 {
before?: boolean
after?: boolean
}
type StylisticSwitchColonSpacing = [_StylisticSwitchColonSpacing0]
// ----- @stylistic/template-curly-spacing -----
type _StylisticTemplateCurlySpacing0 = ("always" | "never")
type StylisticTemplateCurlySpacing = [_StylisticTemplateCurlySpacing0]
// ----- @stylistic/template-tag-spacing -----
type _StylisticTemplateTagSpacing0 = ("always" | "never")
type StylisticTemplateTagSpacing = [_StylisticTemplateTagSpacing0]
// ----- @stylistic/type-annotation-spacing -----
interface _StylisticTypeAnnotationSpacing0 {
before?: boolean
after?: boolean
overrides?: {
colon?: SpacingConfig
arrow?: SpacingConfig
variable?: SpacingConfig
parameter?: SpacingConfig
property?: SpacingConfig
returnType?: SpacingConfig
}
}
interface SpacingConfig {
before?: boolean
after?: boolean
}
type StylisticTypeAnnotationSpacing = [_StylisticTypeAnnotationSpacing0]
// ----- @stylistic/wrap-iife -----
type _StylisticWrapIife0 = ("outside" | "inside" | "any")
interface _StylisticWrapIife1 {
functionPrototypeMethods?: boolean
}
type StylisticWrapIife = [_StylisticWrapIife0, _StylisticWrapIife1]
// ----- @stylistic/yield-star-spacing -----
type _StylisticYieldStarSpacing0 = (("before" | "after" | "both" | "neither") | {
before?: boolean
after?: boolean
})
type StylisticYieldStarSpacing = [_StylisticYieldStarSpacing0]
// ----- @typescript-eslint/array-type -----
interface _TypescriptEslintArrayType0 {
default?: ("array" | "generic" | "array-simple")
readonly?: ("array" | "generic" | "array-simple")
}
interface _TypescriptEslintArrayType1 {
default?: ("array" | "generic" | "array-simple")
readonly?: ("array" | "generic" | "array-simple")
}
type TypescriptEslintArrayType = [_TypescriptEslintArrayType0, _TypescriptEslintArrayType1]
// ----- @typescript-eslint/ban-ts-comment -----
type DirectiveConfigSchema = (boolean | "allow-with-description" | {
descriptionFormat?: string
})
interface _TypescriptEslintBanTsComment0 {
"ts-expect-error"?: DirectiveConfigSchema
"ts-ignore"?: DirectiveConfigSchema
"ts-nocheck"?: DirectiveConfigSchema
"ts-check"?: DirectiveConfigSchema
minimumDescriptionLength?: number
}
type DirectiveConfigSchema = (boolean | "allow-with-description" | {
descriptionFormat?: string
})
interface _TypescriptEslintBanTsComment1 {
"ts-expect-error"?: DirectiveConfigSchema
"ts-ignore"?: DirectiveConfigSchema
"ts-nocheck"?: DirectiveConfigSchema
"ts-check"?: DirectiveConfigSchema
minimumDescriptionLength?: number
}
type TypescriptEslintBanTsComment = [_TypescriptEslintBanTsComment0, _TypescriptEslintBanTsComment1]
// ----- @typescript-eslint/ban-types -----
type BanConfig = (null | false | true | string | {
message?: string
fixWith?: string
suggest?: string[]
})
interface _TypescriptEslintBanTypes0 {
types?: {
[k: string]: BanConfig
}
extendDefaults?: boolean
}
type BanConfig = (null | false | true | string | {
message?: string
fixWith?: string
suggest?: string[]
})
interface _TypescriptEslintBanTypes1 {
types?: {
[k: string]: BanConfig
}
extendDefaults?: boolean
}
type TypescriptEslintBanTypes = [_TypescriptEslintBanTypes0, _TypescriptEslintBanTypes1]
// ----- @typescript-eslint/block-spacing -----
type _TypescriptEslintBlockSpacing0 = ("always" | "never")
type _TypescriptEslintBlockSpacing1 = ("always" | "never")
type TypescriptEslintBlockSpacing = [_TypescriptEslintBlockSpacing0, _TypescriptEslintBlockSpacing1]
// ----- @typescript-eslint/brace-style -----
type _TypescriptEslintBraceStyle0 = ("1tbs" | "stroustrup" | "allman")
interface _TypescriptEslintBraceStyle1 {
allowSingleLine?: boolean
}
type _TypescriptEslintBraceStyle2 = ("1tbs" | "stroustrup" | "allman")
interface _TypescriptEslintBraceStyle3 {
allowSingleLine?: boolean
}
type TypescriptEslintBraceStyle = [_TypescriptEslintBraceStyle0, _TypescriptEslintBraceStyle1, _TypescriptEslintBraceStyle2, _TypescriptEslintBraceStyle3]
// ----- @typescript-eslint/class-literal-property-style -----
type _TypescriptEslintClassLiteralPropertyStyle0 = ("fields" | "getters")
type _TypescriptEslintClassLiteralPropertyStyle1 = ("fields" | "getters")
type TypescriptEslintClassLiteralPropertyStyle = [_TypescriptEslintClassLiteralPropertyStyle0, _TypescriptEslintClassLiteralPropertyStyle1]
// ----- @typescript-eslint/class-methods-use-this -----
interface _TypescriptEslintClassMethodsUseThis0 {
exceptMethods?: string[]
enforceForClassFields?: boolean
ignoreOverrideMethods?: boolean
ignoreClassesThatImplementAnInterface?: (boolean | "public-fields")
}
interface _TypescriptEslintClassMethodsUseThis1 {
exceptMethods?: string[]
enforceForClassFields?: boolean
ignoreOverrideMethods?: boolean
ignoreClassesThatImplementAnInterface?: (boolean | "public-fields")
}
type TypescriptEslintClassMethodsUseThis = [_TypescriptEslintClassMethodsUseThis0, _TypescriptEslintClassMethodsUseThis1]
// ----- @typescript-eslint/comma-dangle -----
type TypescriptEslintCommaDangle = []|[(Value | {
arrays?: ValueWithIgnore
objects?: ValueWithIgnore
imports?: ValueWithIgnore
exports?: ValueWithIgnore
functions?: ValueWithIgnore
enums?: ValueWithIgnore
generics?: ValueWithIgnore
tuples?: ValueWithIgnore
})]|[(Value | {
arrays?: ValueWithIgnore
objects?: ValueWithIgnore
imports?: ValueWithIgnore
exports?: ValueWithIgnore
functions?: ValueWithIgnore
enums?: ValueWithIgnore
generics?: ValueWithIgnore
tuples?: ValueWithIgnore
}), (Value | {
arrays?: ValueWithIgnore
objects?: ValueWithIgnore
imports?: ValueWithIgnore
exports?: ValueWithIgnore
functions?: ValueWithIgnore
enums?: ValueWithIgnore
generics?: ValueWithIgnore
tuples?: ValueWithIgnore
})]
type Value = ("always-multiline" | "always" | "never" | "only-multiline" | "always-multiline" | "always" | "never" | "only-multiline")
type ValueWithIgnore = ("always-multiline" | "always" | "never" | "only-multiline" | "ignore" | "always-multiline" | "always" | "never" | "only-multiline" | "ignore")
type TypescriptEslintCommaDangle = TypescriptEslintCommaDangle[]
// ----- @typescript-eslint/comma-spacing -----
interface _TypescriptEslintCommaSpacing0 {
before?: boolean
after?: boolean
}
interface _TypescriptEslintCommaSpacing1 {
before?: boolean
after?: boolean
}
type TypescriptEslintCommaSpacing = [_TypescriptEslintCommaSpacing0, _TypescriptEslintCommaSpacing1]
// ----- @typescript-eslint/consistent-generic-constructors -----
type _TypescriptEslintConsistentGenericConstructors0 = ("type-annotation" | "constructor")
type _TypescriptEslintConsistentGenericConstructors1 = ("type-annotation" | "constructor")
type TypescriptEslintConsistentGenericConstructors = [_TypescriptEslintConsistentGenericConstructors0, _TypescriptEslintConsistentGenericConstructors1]
// ----- @typescript-eslint/consistent-indexed-object-style -----
type _TypescriptEslintConsistentIndexedObjectStyle0 = ("record" | "index-signature")
type _TypescriptEslintConsistentIndexedObjectStyle1 = ("record" | "index-signature")
type TypescriptEslintConsistentIndexedObjectStyle = [_TypescriptEslintConsistentIndexedObjectStyle0, _TypescriptEslintConsistentIndexedObjectStyle1]
// ----- @typescript-eslint/consistent-return -----
interface _TypescriptEslintConsistentReturn0 {
treatUndefinedAsUnspecified?: boolean
}
interface _TypescriptEslintConsistentReturn1 {
treatUndefinedAsUnspecified?: boolean
}
type TypescriptEslintConsistentReturn = [_TypescriptEslintConsistentReturn0, _TypescriptEslintConsistentReturn1]
// ----- @typescript-eslint/consistent-type-assertions -----
type _TypescriptEslintConsistentTypeAssertions0 = ({
assertionStyle: "never"
} | {
assertionStyle: ("as" | "angle-bracket")
objectLiteralTypeAssertions?: ("allow" | "allow-as-parameter" | "never")
})
type _TypescriptEslintConsistentTypeAssertions1 = ({
assertionStyle: "never"
} | {
assertionStyle: ("as" | "angle-bracket")
objectLiteralTypeAssertions?: ("allow" | "allow-as-parameter" | "never")
})
type TypescriptEslintConsistentTypeAssertions = [_TypescriptEslintConsistentTypeAssertions0, _TypescriptEslintConsistentTypeAssertions1]
// ----- @typescript-eslint/consistent-type-definitions -----
type _TypescriptEslintConsistentTypeDefinitions0 = ("interface" | "type")
type _TypescriptEslintConsistentTypeDefinitions1 = ("interface" | "type")
type TypescriptEslintConsistentTypeDefinitions = [_TypescriptEslintConsistentTypeDefinitions0, _TypescriptEslintConsistentTypeDefinitions1]
// ----- @typescript-eslint/consistent-type-exports -----
interface _TypescriptEslintConsistentTypeExports0 {
fixMixedExportsWithInlineTypeSpecifier?: boolean
}
interface _TypescriptEslintConsistentTypeExports1 {
fixMixedExportsWithInlineTypeSpecifier?: boolean
}
type TypescriptEslintConsistentTypeExports = [_TypescriptEslintConsistentTypeExports0, _TypescriptEslintConsistentTypeExports1]
// ----- @typescript-eslint/consistent-type-imports -----
interface _TypescriptEslintConsistentTypeImports0 {
disallowTypeAnnotations?: boolean
fixStyle?: ("separate-type-imports" | "inline-type-imports")
prefer?: ("type-imports" | "no-type-imports")
}
interface _TypescriptEslintConsistentTypeImports1 {
disallowTypeAnnotations?: boolean
fixStyle?: ("separate-type-imports" | "inline-type-imports")
prefer?: ("type-imports" | "no-type-imports")
}
type TypescriptEslintConsistentTypeImports = [_TypescriptEslintConsistentTypeImports0, _TypescriptEslintConsistentTypeImports1]
// ----- @typescript-eslint/dot-notation -----
interface _TypescriptEslintDotNotation0 {
allowKeywords?: boolean
allowPattern?: string
allowPrivateClassPropertyAccess?: boolean
allowProtectedClassPropertyAccess?: boolean
allowIndexSignaturePropertyAccess?: boolean
}
interface _TypescriptEslintDotNotation1 {
allowKeywords?: boolean
allowPattern?: string
allowPrivateClassPropertyAccess?: boolean
allowProtectedClassPropertyAccess?: boolean
allowIndexSignaturePropertyAccess?: boolean
}
type TypescriptEslintDotNotation = [_TypescriptEslintDotNotation0, _TypescriptEslintDotNotation1]
// ----- @typescript-eslint/explicit-function-return-type -----
interface _TypescriptEslintExplicitFunctionReturnType0 {
allowConciseArrowFunctionExpressionsStartingWithVoid?: boolean
allowExpressions?: boolean
allowHigherOrderFunctions?: boolean
allowTypedFunctionExpressions?: boolean
allowDirectConstAssertionInArrowFunctions?: boolean
allowFunctionsWithoutTypeParameters?: boolean
allowedNames?: string[]
allowIIFEs?: boolean
}
interface _TypescriptEslintExplicitFunctionReturnType1 {
allowConciseArrowFunctionExpressionsStartingWithVoid?: boolean
allowExpressions?: boolean
allowHigherOrderFunctions?: boolean
allowTypedFunctionExpressions?: boolean
allowDirectConstAssertionInArrowFunctions?: boolean
allowFunctionsWithoutTypeParameters?: boolean
allowedNames?: string[]
allowIIFEs?: boolean
}
type TypescriptEslintExplicitFunctionReturnType = [_TypescriptEslintExplicitFunctionReturnType0, _TypescriptEslintExplicitFunctionReturnType1]
// ----- @typescript-eslint/explicit-member-accessibility -----
type AccessibilityLevel = ("explicit" | "no-public" | "off")
interface _TypescriptEslintExplicitMemberAccessibility0 {
accessibility?: AccessibilityLevel
overrides?: {
accessors?: AccessibilityLevel
constructors?: AccessibilityLevel
methods?: AccessibilityLevel
properties?: AccessibilityLevel
parameterProperties?: AccessibilityLevel
}
ignoredMethodNames?: string[]
}
type AccessibilityLevel = ("explicit" | "no-public" | "off")
interface _TypescriptEslintExplicitMemberAccessibility1 {
accessibility?: AccessibilityLevel
overrides?: {
accessors?: AccessibilityLevel
constructors?: AccessibilityLevel
methods?: AccessibilityLevel
properties?: AccessibilityLevel
parameterProperties?: AccessibilityLevel
}
ignoredMethodNames?: string[]
}
type TypescriptEslintExplicitMemberAccessibility = [_TypescriptEslintExplicitMemberAccessibility0, _TypescriptEslintExplicitMemberAccessibility1]
// ----- @typescript-eslint/explicit-module-boundary-types -----
interface _TypescriptEslintExplicitModuleBoundaryTypes0 {
allowArgumentsExplicitlyTypedAsAny?: boolean
allowDirectConstAssertionInArrowFunctions?: boolean
allowedNames?: string[]
allowHigherOrderFunctions?: boolean
allowTypedFunctionExpressions?: boolean
}
interface _TypescriptEslintExplicitModuleBoundaryTypes1 {
allowArgumentsExplicitlyTypedAsAny?: boolean
allowDirectConstAssertionInArrowFunctions?: boolean
allowedNames?: string[]
allowHigherOrderFunctions?: boolean
allowTypedFunctionExpressions?: boolean
}
type TypescriptEslintExplicitModuleBoundaryTypes = [_TypescriptEslintExplicitModuleBoundaryTypes0, _TypescriptEslintExplicitModuleBoundaryTypes1]
// ----- @typescript-eslint/func-call-spacing -----
type TypescriptEslintFuncCallSpacing = ([]|["never"] | []|["always"]|["always", {
allowNewlines?: boolean
}])
type TypescriptEslintFuncCallSpacing = TypescriptEslintFuncCallSpacing[]
// ----- @typescript-eslint/indent -----
type _TypescriptEslintIndent0 = ("tab" | number)
interface _TypescriptEslintIndent1 {
SwitchCase?: number
VariableDeclarator?: ((number | ("first" | "off")) | {
var?: (number | ("first" | "off"))
let?: (number | ("first" | "off"))
const?: (number | ("first" | "off"))
})
outerIIFEBody?: (number | "off")
MemberExpression?: (number | "off")
FunctionDeclaration?: {
parameters?: (number | ("first" | "off"))
body?: number
}
FunctionExpression?: {
parameters?: (number | ("first" | "off"))
body?: number
}
StaticBlock?: {
body?: number
}
CallExpression?: {
arguments?: (number | ("first" | "off"))
}
ArrayExpression?: (number | ("first" | "off"))
ObjectExpression?: (number | ("first" | "off"))
ImportDeclaration?: (number | ("first" | "off"))
flatTernaryExpressions?: boolean
offsetTernaryExpressions?: boolean
ignoredNodes?: string[]
ignoreComments?: boolean
}
type _TypescriptEslintIndent2 = ("tab" | number)
interface _TypescriptEslintIndent3 {
SwitchCase?: number
VariableDeclarator?: ((number | ("first" | "off")) | {
var?: (number | ("first" | "off"))
let?: (number | ("first" | "off"))
const?: (number | ("first" | "off"))
})
outerIIFEBody?: (number | "off")
MemberExpression?: (number | "off")
FunctionDeclaration?: {
parameters?: (number | ("first" | "off"))
body?: number
}
FunctionExpression?: {
parameters?: (number | ("first" | "off"))
body?: number
}
StaticBlock?: {
body?: number
}
CallExpression?: {
arguments?: (number | ("first" | "off"))
}
ArrayExpression?: (number | ("first" | "off"))
ObjectExpression?: (number | ("first" | "off"))
ImportDeclaration?: (number | ("first" | "off"))
flatTernaryExpressions?: boolean
offsetTernaryExpressions?: boolean
ignoredNodes?: string[]
ignoreComments?: boolean
}
type TypescriptEslintIndent = [_TypescriptEslintIndent0, _TypescriptEslintIndent1, _TypescriptEslintIndent2, _TypescriptEslintIndent3]
// ----- @typescript-eslint/init-declarations -----
type TypescriptEslintInitDeclarations = ([]|["always"] | []|["never"]|["never", {
ignoreForLoopInit?: boolean
}])
type TypescriptEslintInitDeclarations = TypescriptEslintInitDeclarations[]
// ----- @typescript-eslint/key-spacing -----
type _TypescriptEslintKeySpacing0 = ({
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
align?: {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
}
})
type _TypescriptEslintKeySpacing1 = ({
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
align?: {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
}
})
type TypescriptEslintKeySpacing = [_TypescriptEslintKeySpacing0, _TypescriptEslintKeySpacing1]
// ----- @typescript-eslint/keyword-spacing -----
interface _TypescriptEslintKeywordSpacing0 {
before?: boolean
after?: boolean
overrides?: {
abstract?: {
before?: boolean
after?: boolean
}
as?: {
before?: boolean
after?: boolean
}
async?: {
before?: boolean
after?: boolean
}
await?: {
before?: boolean
after?: boolean
}
boolean?: {
before?: boolean
after?: boolean
}
break?: {
before?: boolean
after?: boolean
}
byte?: {
before?: boolean
after?: boolean
}
case?: {
before?: boolean
after?: boolean
}
catch?: {
before?: boolean
after?: boolean
}
char?: {
before?: boolean
after?: boolean
}
class?: {
before?: boolean
after?: boolean
}
const?: {
before?: boolean
after?: boolean
}
continue?: {
before?: boolean
after?: boolean
}
debugger?: {
before?: boolean
after?: boolean
}
default?: {
before?: boolean
after?: boolean
}
delete?: {
before?: boolean
after?: boolean
}
do?: {
before?: boolean
after?: boolean
}
double?: {
before?: boolean
after?: boolean
}
else?: {
before?: boolean
after?: boolean
}
enum?: {
before?: boolean
after?: boolean
}
export?: {
before?: boolean
after?: boolean
}
extends?: {
before?: boolean
after?: boolean
}
false?: {
before?: boolean
after?: boolean
}
final?: {
before?: boolean
after?: boolean
}
finally?: {
before?: boolean
after?: boolean
}
float?: {
before?: boolean
after?: boolean
}
for?: {
before?: boolean
after?: boolean
}
from?: {
before?: boolean
after?: boolean
}
function?: {
before?: boolean
after?: boolean
}
get?: {
before?: boolean
after?: boolean
}
goto?: {
before?: boolean
after?: boolean
}
if?: {
before?: boolean
after?: boolean
}
implements?: {
before?: boolean
after?: boolean
}
import?: {
before?: boolean
after?: boolean
}
in?: {
before?: boolean
after?: boolean
}
instanceof?: {
before?: boolean
after?: boolean
}
int?: {
before?: boolean
after?: boolean
}
interface?: {
before?: boolean
after?: boolean
}
let?: {
before?: boolean
after?: boolean
}
long?: {
before?: boolean
after?: boolean
}
native?: {
before?: boolean
after?: boolean
}
new?: {
before?: boolean
after?: boolean
}
null?: {
before?: boolean
after?: boolean
}
of?: {
before?: boolean
after?: boolean
}
package?: {
before?: boolean
after?: boolean
}
private?: {
before?: boolean
after?: boolean
}
protected?: {
before?: boolean
after?: boolean
}
public?: {
before?: boolean
after?: boolean
}
return?: {
before?: boolean
after?: boolean
}
set?: {
before?: boolean
after?: boolean
}
short?: {
before?: boolean
after?: boolean
}
static?: {
before?: boolean
after?: boolean
}
super?: {
before?: boolean
after?: boolean
}
switch?: {
before?: boolean
after?: boolean
}
synchronized?: {
before?: boolean
after?: boolean
}
this?: {
before?: boolean
after?: boolean
}
throw?: {
before?: boolean
after?: boolean
}
throws?: {
before?: boolean
after?: boolean
}
transient?: {
before?: boolean
after?: boolean
}
true?: {
before?: boolean
after?: boolean
}
try?: {
before?: boolean
after?: boolean
}
typeof?: {
before?: boolean
after?: boolean
}
var?: {
before?: boolean
after?: boolean
}
void?: {
before?: boolean
after?: boolean
}
volatile?: {
before?: boolean
after?: boolean
}
while?: {
before?: boolean
after?: boolean
}
with?: {
before?: boolean
after?: boolean
}
yield?: {
before?: boolean
after?: boolean
}
type?: {
before?: boolean
after?: boolean
}
}
}
interface _TypescriptEslintKeywordSpacing1 {
before?: boolean
after?: boolean
overrides?: {
abstract?: {
before?: boolean
after?: boolean
}
as?: {
before?: boolean
after?: boolean
}
async?: {
before?: boolean
after?: boolean
}
await?: {
before?: boolean
after?: boolean
}
boolean?: {
before?: boolean
after?: boolean
}
break?: {
before?: boolean
after?: boolean
}
byte?: {
before?: boolean
after?: boolean
}
case?: {
before?: boolean
after?: boolean
}
catch?: {
before?: boolean
after?: boolean
}
char?: {
before?: boolean
after?: boolean
}
class?: {
before?: boolean
after?: boolean
}
const?: {
before?: boolean
after?: boolean
}
continue?: {
before?: boolean
after?: boolean
}
debugger?: {
before?: boolean
after?: boolean
}
default?: {
before?: boolean
after?: boolean
}
delete?: {
before?: boolean
after?: boolean
}
do?: {
before?: boolean
after?: boolean
}
double?: {
before?: boolean
after?: boolean
}
else?: {
before?: boolean
after?: boolean
}
enum?: {
before?: boolean
after?: boolean
}
export?: {
before?: boolean
after?: boolean
}
extends?: {
before?: boolean
after?: boolean
}
false?: {
before?: boolean
after?: boolean
}
final?: {
before?: boolean
after?: boolean
}
finally?: {
before?: boolean
after?: boolean
}
float?: {
before?: boolean
after?: boolean
}
for?: {
before?: boolean
after?: boolean
}
from?: {
before?: boolean
after?: boolean
}
function?: {
before?: boolean
after?: boolean
}
get?: {
before?: boolean
after?: boolean
}
goto?: {
before?: boolean
after?: boolean
}
if?: {
before?: boolean
after?: boolean
}
implements?: {
before?: boolean
after?: boolean
}
import?: {
before?: boolean
after?: boolean
}
in?: {
before?: boolean
after?: boolean
}
instanceof?: {
before?: boolean
after?: boolean
}
int?: {
before?: boolean
after?: boolean
}
interface?: {
before?: boolean
after?: boolean
}
let?: {
before?: boolean
after?: boolean
}
long?: {
before?: boolean
after?: boolean
}
native?: {
before?: boolean
after?: boolean
}
new?: {
before?: boolean
after?: boolean
}
null?: {
before?: boolean
after?: boolean
}
of?: {
before?: boolean
after?: boolean
}
package?: {
before?: boolean
after?: boolean
}
private?: {
before?: boolean
after?: boolean
}
protected?: {
before?: boolean
after?: boolean
}
public?: {
before?: boolean
after?: boolean
}
return?: {
before?: boolean
after?: boolean
}
set?: {
before?: boolean
after?: boolean
}
short?: {
before?: boolean
after?: boolean
}
static?: {
before?: boolean
after?: boolean
}
super?: {
before?: boolean
after?: boolean
}
switch?: {
before?: boolean
after?: boolean
}
synchronized?: {
before?: boolean
after?: boolean
}
this?: {
before?: boolean
after?: boolean
}
throw?: {
before?: boolean
after?: boolean
}
throws?: {
before?: boolean
after?: boolean
}
transient?: {
before?: boolean
after?: boolean
}
true?: {
before?: boolean
after?: boolean
}
try?: {
before?: boolean
after?: boolean
}
typeof?: {
before?: boolean
after?: boolean
}
var?: {
before?: boolean
after?: boolean
}
void?: {
before?: boolean
after?: boolean
}
volatile?: {
before?: boolean
after?: boolean
}
while?: {
before?: boolean
after?: boolean
}
with?: {
before?: boolean
after?: boolean
}
yield?: {
before?: boolean
after?: boolean
}
type?: {
before?: boolean
after?: boolean
}
}
}
type TypescriptEslintKeywordSpacing = [_TypescriptEslintKeywordSpacing0, _TypescriptEslintKeywordSpacing1]
// ----- @typescript-eslint/lines-around-comment -----
interface _TypescriptEslintLinesAroundComment0 {
beforeBlockComment?: boolean
afterBlockComment?: boolean
beforeLineComment?: boolean
afterLineComment?: boolean
allowBlockStart?: boolean
allowBlockEnd?: boolean
allowClassStart?: boolean
allowClassEnd?: boolean
allowObjectStart?: boolean
allowObjectEnd?: boolean
allowArrayStart?: boolean
allowArrayEnd?: boolean
allowInterfaceStart?: boolean
allowInterfaceEnd?: boolean
allowTypeStart?: boolean
allowTypeEnd?: boolean
allowEnumStart?: boolean
allowEnumEnd?: boolean
allowModuleStart?: boolean
allowModuleEnd?: boolean
ignorePattern?: string
applyDefaultIgnorePatterns?: boolean
}
interface _TypescriptEslintLinesAroundComment1 {
beforeBlockComment?: boolean
afterBlockComment?: boolean
beforeLineComment?: boolean
afterLineComment?: boolean
allowBlockStart?: boolean
allowBlockEnd?: boolean
allowClassStart?: boolean
allowClassEnd?: boolean
allowObjectStart?: boolean
allowObjectEnd?: boolean
allowArrayStart?: boolean
allowArrayEnd?: boolean
allowInterfaceStart?: boolean
allowInterfaceEnd?: boolean
allowTypeStart?: boolean
allowTypeEnd?: boolean
allowEnumStart?: boolean
allowEnumEnd?: boolean
allowModuleStart?: boolean
allowModuleEnd?: boolean
ignorePattern?: string
applyDefaultIgnorePatterns?: boolean
}
type TypescriptEslintLinesAroundComment = [_TypescriptEslintLinesAroundComment0, _TypescriptEslintLinesAroundComment1]
// ----- @typescript-eslint/lines-between-class-members -----
type _TypescriptEslintLinesBetweenClassMembers0 = ({
enforce: [{
blankLine: ("always" | "never")
prev: ("method" | "field" | "*")
next: ("method" | "field" | "*")
}, ...({
blankLine: ("always" | "never")
prev: ("method" | "field" | "*")
next: ("method" | "field" | "*")
})[]]
} | ("always" | "never"))
interface _TypescriptEslintLinesBetweenClassMembers1 {
exceptAfterSingleLine?: boolean
exceptAfterOverload?: boolean
}
type _TypescriptEslintLinesBetweenClassMembers2 = ({
enforce: [{
blankLine: ("always" | "never")
prev: ("method" | "field" | "*")
next: ("method" | "field" | "*")
}, ...({
blankLine: ("always" | "never")
prev: ("method" | "field" | "*")
next: ("method" | "field" | "*")
})[]]
} | ("always" | "never"))
interface _TypescriptEslintLinesBetweenClassMembers3 {
exceptAfterSingleLine?: boolean
exceptAfterOverload?: boolean
}
type TypescriptEslintLinesBetweenClassMembers = [_TypescriptEslintLinesBetweenClassMembers0, _TypescriptEslintLinesBetweenClassMembers1, _TypescriptEslintLinesBetweenClassMembers2, _TypescriptEslintLinesBetweenClassMembers3]
// ----- @typescript-eslint/max-params -----
interface _TypescriptEslintMaxParams0 {
maximum?: number
max?: number
countVoidThis?: boolean
}
interface _TypescriptEslintMaxParams1 {
maximum?: number
max?: number
countVoidThis?: boolean
}
type TypescriptEslintMaxParams = [_TypescriptEslintMaxParams0, _TypescriptEslintMaxParams1]
// ----- @typescript-eslint/member-delimiter-style -----
type MultiLineOption = ("none" | "semi" | "comma")
type SingleLineOption = ("semi" | "comma")
interface _TypescriptEslintMemberDelimiterStyle0 {
multiline?: {
delimiter?: MultiLineOption
requireLast?: boolean
}
singleline?: {
delimiter?: SingleLineOption
requireLast?: boolean
}
overrides?: {
interface?: DelimiterConfig
typeLiteral?: DelimiterConfig
}
multilineDetection?: ("brackets" | "last-member")
}
interface DelimiterConfig {
multiline?: {
delimiter?: MultiLineOption
requireLast?: boolean
}
singleline?: {
delimiter?: SingleLineOption
requireLast?: boolean
}
}
type MultiLineOption = ("none" | "semi" | "comma")
type SingleLineOption = ("semi" | "comma")
interface _TypescriptEslintMemberDelimiterStyle1 {
multiline?: {
delimiter?: MultiLineOption
requireLast?: boolean
}
singleline?: {
delimiter?: SingleLineOption
requireLast?: boolean
}
overrides?: {
interface?: DelimiterConfig
typeLiteral?: DelimiterConfig
}
multilineDetection?: ("brackets" | "last-member")
}
interface DelimiterConfig {
multiline?: {
delimiter?: MultiLineOption
requireLast?: boolean
}
singleline?: {
delimiter?: SingleLineOption
requireLast?: boolean
}
}
type TypescriptEslintMemberDelimiterStyle = [_TypescriptEslintMemberDelimiterStyle0, _TypescriptEslintMemberDelimiterStyle1]
// ----- @typescript-eslint/member-ordering -----
type BaseConfig = ("never" | (AllItems | AllItems[])[] | {
memberTypes?: ((AllItems | AllItems[])[] | "never")
order?: OrderOptions
optionalityOrder?: OptionalityOrderOptions
})
type AllItems = ("readonly-signature" | "signature" | "readonly-field" | "public-readonly-field" | "public-decorated-readonly-field" | "decorated-readonly-field" | "static-readonly-field" | "public-static-readonly-field" | "instance-readonly-field" | "public-instance-readonly-field" | "abstract-readonly-field" | "public-abstract-readonly-field" | "protected-readonly-field" | "protected-decorated-readonly-field" | "protected-static-readonly-field" | "protected-instance-readonly-field" | "protected-abstract-readonly-field" | "private-readonly-field" | "private-decorated-readonly-field" | "private-static-readonly-field" | "private-instance-readonly-field" | "#private-readonly-field" | "#private-static-readonly-field" | "#private-instance-readonly-field" | "field" | "public-field" | "public-decorated-field" | "decorated-field" | "static-field" | "public-static-field" | "instance-field" | "public-instance-field" | "abstract-field" | "public-abstract-field" | "protected-field" | "protected-decorated-field" | "protected-static-field" | "protected-instance-field" | "protected-abstract-field" | "private-field" | "private-decorated-field" | "private-static-field" | "private-instance-field" | "#private-field" | "#private-static-field" | "#private-instance-field" | "method" | "public-method" | "public-decorated-method" | "decorated-method" | "static-method" | "public-static-method" | "instance-method" | "public-instance-method" | "abstract-method" | "public-abstract-method" | "protected-method" | "protected-decorated-method" | "protected-static-method" | "protected-instance-method" | "protected-abstract-method" | "private-method" | "private-decorated-method" | "private-static-method" | "private-instance-method" | "#private-method" | "#private-static-method" | "#private-instance-method" | "call-signature" | "constructor" | "public-constructor" | "protected-constructor" | "private-constructor" | "accessor" | "public-accessor" | "public-decorated-accessor" | "decorated-accessor" | "static-accessor" | "public-static-accessor" | "instance-accessor" | "public-instance-accessor" | "abstract-accessor" | "public-abstract-accessor" | "protected-accessor" | "protected-decorated-accessor" | "protected-static-accessor" | "protected-instance-accessor" | "protected-abstract-accessor" | "private-accessor" | "private-decorated-accessor" | "private-static-accessor" | "private-instance-accessor" | "#private-accessor" | "#private-static-accessor" | "#private-instance-accessor" | "get" | "public-get" | "public-decorated-get" | "decorated-get" | "static-get" | "public-static-get" | "instance-get" | "public-instance-get" | "abstract-get" | "public-abstract-get" | "protected-get" | "protected-decorated-get" | "protected-static-get" | "protected-instance-get" | "protected-abstract-get" | "private-get" | "private-decorated-get" | "private-static-get" | "private-instance-get" | "#private-get" | "#private-static-get" | "#private-instance-get" | "set" | "public-set" | "public-decorated-set" | "decorated-set" | "static-set" | "public-static-set" | "instance-set" | "public-instance-set" | "abstract-set" | "public-abstract-set" | "protected-set" | "protected-decorated-set" | "protected-static-set" | "protected-instance-set" | "protected-abstract-set" | "private-set" | "private-decorated-set" | "private-static-set" | "private-instance-set" | "#private-set" | "#private-static-set" | "#private-instance-set" | "static-initialization" | "static-static-initialization" | "public-static-static-initialization" | "instance-static-initialization" | "public-instance-static-initialization" | "abstract-static-initialization" | "public-abstract-static-initialization" | "protected-static-static-initialization" | "protected-instance-static-initialization" | "protected-abstract-static-initialization" | "private-static-static-initialization" | "private-instance-static-initialization" | "#private-static-static-initialization" | "#private-instance-static-initialization")
type OrderOptions = ("alphabetically" | "alphabetically-case-insensitive" | "as-written" | "natural" | "natural-case-insensitive")
type OptionalityOrderOptions = ("optional-first" | "required-first")
type TypesConfig = ("never" | (TypeItems | TypeItems[])[] | {
memberTypes?: ((TypeItems | TypeItems[])[] | "never")
order?: OrderOptions
optionalityOrder?: OptionalityOrderOptions
})
type TypeItems = ("readonly-signature" | "signature" | "readonly-field" | "field" | "method" | "constructor")
interface _TypescriptEslintMemberOrdering0 {
default?: BaseConfig
classes?: BaseConfig
classExpressions?: BaseConfig
interfaces?: TypesConfig
typeLiterals?: TypesConfig
}
type BaseConfig = ("never" | (AllItems | AllItems[])[] | {
memberTypes?: ((AllItems | AllItems[])[] | "never")
order?: OrderOptions
optionalityOrder?: OptionalityOrderOptions
})
type AllItems = ("readonly-signature" | "signature" | "readonly-field" | "public-readonly-field" | "public-decorated-readonly-field" | "decorated-readonly-field" | "static-readonly-field" | "public-static-readonly-field" | "instance-readonly-field" | "public-instance-readonly-field" | "abstract-readonly-field" | "public-abstract-readonly-field" | "protected-readonly-field" | "protected-decorated-readonly-field" | "protected-static-readonly-field" | "protected-instance-readonly-field" | "protected-abstract-readonly-field" | "private-readonly-field" | "private-decorated-readonly-field" | "private-static-readonly-field" | "private-instance-readonly-field" | "#private-readonly-field" | "#private-static-readonly-field" | "#private-instance-readonly-field" | "field" | "public-field" | "public-decorated-field" | "decorated-field" | "static-field" | "public-static-field" | "instance-field" | "public-instance-field" | "abstract-field" | "public-abstract-field" | "protected-field" | "protected-decorated-field" | "protected-static-field" | "protected-instance-field" | "protected-abstract-field" | "private-field" | "private-decorated-field" | "private-static-field" | "private-instance-field" | "#private-field" | "#private-static-field" | "#private-instance-field" | "method" | "public-method" | "public-decorated-method" | "decorated-method" | "static-method" | "public-static-method" | "instance-method" | "public-instance-method" | "abstract-method" | "public-abstract-method" | "protected-method" | "protected-decorated-method" | "protected-static-method" | "protected-instance-method" | "protected-abstract-method" | "private-method" | "private-decorated-method" | "private-static-method" | "private-instance-method" | "#private-method" | "#private-static-method" | "#private-instance-method" | "call-signature" | "constructor" | "public-constructor" | "protected-constructor" | "private-constructor" | "accessor" | "public-accessor" | "public-decorated-accessor" | "decorated-accessor" | "static-accessor" | "public-static-accessor" | "instance-accessor" | "public-instance-accessor" | "abstract-accessor" | "public-abstract-accessor" | "protected-accessor" | "protected-decorated-accessor" | "protected-static-accessor" | "protected-instance-accessor" | "protected-abstract-accessor" | "private-accessor" | "private-decorated-accessor" | "private-static-accessor" | "private-instance-accessor" | "#private-accessor" | "#private-static-accessor" | "#private-instance-accessor" | "get" | "public-get" | "public-decorated-get" | "decorated-get" | "static-get" | "public-static-get" | "instance-get" | "public-instance-get" | "abstract-get" | "public-abstract-get" | "protected-get" | "protected-decorated-get" | "protected-static-get" | "protected-instance-get" | "protected-abstract-get" | "private-get" | "private-decorated-get" | "private-static-get" | "private-instance-get" | "#private-get" | "#private-static-get" | "#private-instance-get" | "set" | "public-set" | "public-decorated-set" | "decorated-set" | "static-set" | "public-static-set" | "instance-set" | "public-instance-set" | "abstract-set" | "public-abstract-set" | "protected-set" | "protected-decorated-set" | "protected-static-set" | "protected-instance-set" | "protected-abstract-set" | "private-set" | "private-decorated-set" | "private-static-set" | "private-instance-set" | "#private-set" | "#private-static-set" | "#private-instance-set" | "static-initialization" | "static-static-initialization" | "public-static-static-initialization" | "instance-static-initialization" | "public-instance-static-initialization" | "abstract-static-initialization" | "public-abstract-static-initialization" | "protected-static-static-initialization" | "protected-instance-static-initialization" | "protected-abstract-static-initialization" | "private-static-static-initialization" | "private-instance-static-initialization" | "#private-static-static-initialization" | "#private-instance-static-initialization")
type OrderOptions = ("alphabetically" | "alphabetically-case-insensitive" | "as-written" | "natural" | "natural-case-insensitive")
type OptionalityOrderOptions = ("optional-first" | "required-first")
type TypesConfig = ("never" | (TypeItems | TypeItems[])[] | {
memberTypes?: ((TypeItems | TypeItems[])[] | "never")
order?: OrderOptions
optionalityOrder?: OptionalityOrderOptions
})
type TypeItems = ("readonly-signature" | "signature" | "readonly-field" | "field" | "method" | "constructor")
interface _TypescriptEslintMemberOrdering1 {
default?: BaseConfig
classes?: BaseConfig
classExpressions?: BaseConfig
interfaces?: TypesConfig
typeLiterals?: TypesConfig
}
type TypescriptEslintMemberOrdering = [_TypescriptEslintMemberOrdering0, _TypescriptEslintMemberOrdering1]
// ----- @typescript-eslint/method-signature-style -----
type _TypescriptEslintMethodSignatureStyle0 = ("property" | "method")
type _TypescriptEslintMethodSignatureStyle1 = ("property" | "method")
type TypescriptEslintMethodSignatureStyle = [_TypescriptEslintMethodSignatureStyle0, _TypescriptEslintMethodSignatureStyle1]
// ----- @typescript-eslint/naming-convention -----
type FormatOptionsConfig = (PredefinedFormats[] | null | PredefinedFormats[] | null)
type PredefinedFormats = ("camelCase" | "strictCamelCase" | "PascalCase" | "StrictPascalCase" | "snake_case" | "UPPER_CASE" | "camelCase" | "strictCamelCase" | "PascalCase" | "StrictPascalCase" | "snake_case" | "UPPER_CASE")
type UnderscoreOptions = ("forbid" | "allow" | "require" | "requireDouble" | "allowDouble" | "allowSingleOrDouble" | "forbid" | "allow" | "require" | "requireDouble" | "allowDouble" | "allowSingleOrDouble")
type PrefixSuffixConfig = string[]
type TypeModifiers = ("boolean" | "string" | "number" | "function" | "array" | "boolean" | "string" | "number" | "function" | "array")
type TypescriptEslintNamingConvention = ({
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: ("default" | "variableLike" | "memberLike" | "typeLike" | "method" | "property" | "accessor" | "variable" | "function" | "parameter" | "parameterProperty" | "classicAccessor" | "enumMember" | "classMethod" | "objectLiteralMethod" | "typeMethod" | "classProperty" | "objectLiteralProperty" | "typeProperty" | "autoAccessor" | "class" | "interface" | "typeAlias" | "enum" | "typeParameter" | "import")[]
modifiers?: ("const" | "readonly" | "static" | "public" | "protected" | "private" | "#private" | "abstract" | "destructured" | "global" | "exported" | "unused" | "requiresQuotes" | "override" | "async" | "default" | "namespace")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "default"
modifiers?: ("const" | "readonly" | "static" | "public" | "protected" | "private" | "#private" | "abstract" | "destructured" | "global" | "exported" | "unused" | "requiresQuotes" | "override" | "async" | "default" | "namespace")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "variableLike"
modifiers?: ("unused" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "variable"
modifiers?: ("const" | "destructured" | "exported" | "global" | "unused" | "async")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "function"
modifiers?: ("exported" | "global" | "unused" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "parameter"
modifiers?: ("destructured" | "unused")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "memberLike"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "readonly" | "requiresQuotes" | "static" | "override" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "classProperty"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "readonly" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "objectLiteralProperty"
modifiers?: ("public" | "requiresQuotes")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeProperty"
modifiers?: ("public" | "readonly" | "requiresQuotes")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "parameterProperty"
modifiers?: ("private" | "protected" | "public" | "readonly")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "property"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "readonly" | "requiresQuotes" | "static" | "override" | "async")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "classMethod"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "requiresQuotes" | "static" | "override" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "objectLiteralMethod"
modifiers?: ("public" | "requiresQuotes" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeMethod"
modifiers?: ("public" | "requiresQuotes")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "method"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "requiresQuotes" | "static" | "override" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "classicAccessor"
modifiers?: ("abstract" | "private" | "protected" | "public" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "autoAccessor"
modifiers?: ("abstract" | "private" | "protected" | "public" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "accessor"
modifiers?: ("abstract" | "private" | "protected" | "public" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "enumMember"
modifiers?: ("requiresQuotes")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeLike"
modifiers?: ("abstract" | "exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "class"
modifiers?: ("abstract" | "exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "interface"
modifiers?: ("exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeAlias"
modifiers?: ("exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "enum"
modifiers?: ("exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeParameter"
modifiers?: ("unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "import"
modifiers?: ("default" | "namespace")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: ("default" | "variableLike" | "memberLike" | "typeLike" | "method" | "property" | "accessor" | "variable" | "function" | "parameter" | "parameterProperty" | "classicAccessor" | "enumMember" | "classMethod" | "objectLiteralMethod" | "typeMethod" | "classProperty" | "objectLiteralProperty" | "typeProperty" | "autoAccessor" | "class" | "interface" | "typeAlias" | "enum" | "typeParameter" | "import")[]
modifiers?: ("const" | "readonly" | "static" | "public" | "protected" | "private" | "#private" | "abstract" | "destructured" | "global" | "exported" | "unused" | "requiresQuotes" | "override" | "async" | "default" | "namespace")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "default"
modifiers?: ("const" | "readonly" | "static" | "public" | "protected" | "private" | "#private" | "abstract" | "destructured" | "global" | "exported" | "unused" | "requiresQuotes" | "override" | "async" | "default" | "namespace")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "variableLike"
modifiers?: ("unused" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "variable"
modifiers?: ("const" | "destructured" | "exported" | "global" | "unused" | "async")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "function"
modifiers?: ("exported" | "global" | "unused" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "parameter"
modifiers?: ("destructured" | "unused")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "memberLike"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "readonly" | "requiresQuotes" | "static" | "override" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "classProperty"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "readonly" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "objectLiteralProperty"
modifiers?: ("public" | "requiresQuotes")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeProperty"
modifiers?: ("public" | "readonly" | "requiresQuotes")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "parameterProperty"
modifiers?: ("private" | "protected" | "public" | "readonly")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "property"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "readonly" | "requiresQuotes" | "static" | "override" | "async")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "classMethod"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "requiresQuotes" | "static" | "override" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "objectLiteralMethod"
modifiers?: ("public" | "requiresQuotes" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeMethod"
modifiers?: ("public" | "requiresQuotes")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "method"
modifiers?: ("abstract" | "private" | "#private" | "protected" | "public" | "requiresQuotes" | "static" | "override" | "async")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "classicAccessor"
modifiers?: ("abstract" | "private" | "protected" | "public" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "autoAccessor"
modifiers?: ("abstract" | "private" | "protected" | "public" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "accessor"
modifiers?: ("abstract" | "private" | "protected" | "public" | "requiresQuotes" | "static" | "override")[]
types?: TypeModifiers[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "enumMember"
modifiers?: ("requiresQuotes")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeLike"
modifiers?: ("abstract" | "exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "class"
modifiers?: ("abstract" | "exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "interface"
modifiers?: ("exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeAlias"
modifiers?: ("exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "enum"
modifiers?: ("exported" | "unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "typeParameter"
modifiers?: ("unused")[]
} | {
format: FormatOptionsConfig
custom?: MatchRegexConfig
leadingUnderscore?: UnderscoreOptions
trailingUnderscore?: UnderscoreOptions
prefix?: PrefixSuffixConfig
suffix?: PrefixSuffixConfig
failureMessage?: string
filter?: (string | MatchRegexConfig)
selector: "import"
modifiers?: ("default" | "namespace")[]
})[]
interface MatchRegexConfig {
match: boolean
regex: string
}
type TypescriptEslintNamingConvention = TypescriptEslintNamingConvention[]
// ----- @typescript-eslint/no-base-to-string -----
interface _TypescriptEslintNoBaseToString0 {
ignoredTypeNames?: string[]
}
interface _TypescriptEslintNoBaseToString1 {
ignoredTypeNames?: string[]
}
type TypescriptEslintNoBaseToString = [_TypescriptEslintNoBaseToString0, _TypescriptEslintNoBaseToString1]
// ----- @typescript-eslint/no-confusing-void-expression -----
interface _TypescriptEslintNoConfusingVoidExpression0 {
ignoreArrowShorthand?: boolean
ignoreVoidOperator?: boolean
}
interface _TypescriptEslintNoConfusingVoidExpression1 {
ignoreArrowShorthand?: boolean
ignoreVoidOperator?: boolean
}
type TypescriptEslintNoConfusingVoidExpression = [_TypescriptEslintNoConfusingVoidExpression0, _TypescriptEslintNoConfusingVoidExpression1]
// ----- @typescript-eslint/no-duplicate-type-constituents -----
interface _TypescriptEslintNoDuplicateTypeConstituents0 {
ignoreIntersections?: boolean
ignoreUnions?: boolean
}
interface _TypescriptEslintNoDuplicateTypeConstituents1 {
ignoreIntersections?: boolean
ignoreUnions?: boolean
}
type TypescriptEslintNoDuplicateTypeConstituents = [_TypescriptEslintNoDuplicateTypeConstituents0, _TypescriptEslintNoDuplicateTypeConstituents1]
// ----- @typescript-eslint/no-empty-function -----
interface _TypescriptEslintNoEmptyFunction0 {
allow?: ("functions" | "arrowFunctions" | "generatorFunctions" | "methods" | "generatorMethods" | "getters" | "setters" | "constructors" | "private-constructors" | "protected-constructors" | "asyncFunctions" | "asyncMethods" | "decoratedFunctions" | "overrideMethods")[]
}
interface _TypescriptEslintNoEmptyFunction1 {
allow?: ("functions" | "arrowFunctions" | "generatorFunctions" | "methods" | "generatorMethods" | "getters" | "setters" | "constructors" | "private-constructors" | "protected-constructors" | "asyncFunctions" | "asyncMethods" | "decoratedFunctions" | "overrideMethods")[]
}
type TypescriptEslintNoEmptyFunction = [_TypescriptEslintNoEmptyFunction0, _TypescriptEslintNoEmptyFunction1]
// ----- @typescript-eslint/no-empty-interface -----
interface _TypescriptEslintNoEmptyInterface0 {
allowSingleExtends?: boolean
}
interface _TypescriptEslintNoEmptyInterface1 {
allowSingleExtends?: boolean
}
type TypescriptEslintNoEmptyInterface = [_TypescriptEslintNoEmptyInterface0, _TypescriptEslintNoEmptyInterface1]
// ----- @typescript-eslint/no-explicit-any -----
interface _TypescriptEslintNoExplicitAny0 {
fixToUnknown?: boolean
ignoreRestArgs?: boolean
}
interface _TypescriptEslintNoExplicitAny1 {
fixToUnknown?: boolean
ignoreRestArgs?: boolean
}
type TypescriptEslintNoExplicitAny = [_TypescriptEslintNoExplicitAny0, _TypescriptEslintNoExplicitAny1]
// ----- @typescript-eslint/no-extra-parens -----
type TypescriptEslintNoExtraParens = ([]|["functions"] | []|["all"]|["all", {
conditionalAssign?: boolean
ternaryOperandBinaryExpressions?: boolean
nestedBinaryExpressions?: boolean
returnAssign?: boolean
ignoreJSX?: ("none" | "all" | "single-line" | "multi-line")
enforceForArrowConditionals?: boolean
enforceForSequenceExpressions?: boolean
enforceForNewInMemberExpressions?: boolean
enforceForFunctionPrototypeMethods?: boolean
allowParensAfterCommentPattern?: string
}])
type TypescriptEslintNoExtraParens = TypescriptEslintNoExtraParens[]
// ----- @typescript-eslint/no-extraneous-class -----
interface _TypescriptEslintNoExtraneousClass0 {
allowConstructorOnly?: boolean
allowEmpty?: boolean
allowStaticOnly?: boolean
allowWithDecorator?: boolean
}
interface _TypescriptEslintNoExtraneousClass1 {
allowConstructorOnly?: boolean
allowEmpty?: boolean
allowStaticOnly?: boolean
allowWithDecorator?: boolean
}
type TypescriptEslintNoExtraneousClass = [_TypescriptEslintNoExtraneousClass0, _TypescriptEslintNoExtraneousClass1]
// ----- @typescript-eslint/no-floating-promises -----
interface _TypescriptEslintNoFloatingPromises0 {
ignoreVoid?: boolean
ignoreIIFE?: boolean
}
interface _TypescriptEslintNoFloatingPromises1 {
ignoreVoid?: boolean
ignoreIIFE?: boolean
}
type TypescriptEslintNoFloatingPromises = [_TypescriptEslintNoFloatingPromises0, _TypescriptEslintNoFloatingPromises1]
// ----- @typescript-eslint/no-inferrable-types -----
interface _TypescriptEslintNoInferrableTypes0 {
ignoreParameters?: boolean
ignoreProperties?: boolean
}
interface _TypescriptEslintNoInferrableTypes1 {
ignoreParameters?: boolean
ignoreProperties?: boolean
}
type TypescriptEslintNoInferrableTypes = [_TypescriptEslintNoInferrableTypes0, _TypescriptEslintNoInferrableTypes1]
// ----- @typescript-eslint/no-invalid-this -----
interface _TypescriptEslintNoInvalidThis0 {
capIsConstructor?: boolean
}
interface _TypescriptEslintNoInvalidThis1 {
capIsConstructor?: boolean
}
type TypescriptEslintNoInvalidThis = [_TypescriptEslintNoInvalidThis0, _TypescriptEslintNoInvalidThis1]
// ----- @typescript-eslint/no-invalid-void-type -----
interface _TypescriptEslintNoInvalidVoidType0 {
allowInGenericTypeArguments?: (boolean | [string, ...(string)[]])
allowAsThisParameter?: boolean
}
interface _TypescriptEslintNoInvalidVoidType1 {
allowInGenericTypeArguments?: (boolean | [string, ...(string)[]])
allowAsThisParameter?: boolean
}
type TypescriptEslintNoInvalidVoidType = [_TypescriptEslintNoInvalidVoidType0, _TypescriptEslintNoInvalidVoidType1]
// ----- @typescript-eslint/no-magic-numbers -----
interface _TypescriptEslintNoMagicNumbers0 {
detectObjects?: boolean
enforceConst?: boolean
ignore?: (number | string)[]
ignoreArrayIndexes?: boolean
ignoreDefaultValues?: boolean
ignoreClassFieldInitialValues?: boolean
ignoreNumericLiteralTypes?: boolean
ignoreEnums?: boolean
ignoreReadonlyClassProperties?: boolean
ignoreTypeIndexes?: boolean
}
interface _TypescriptEslintNoMagicNumbers1 {
detectObjects?: boolean
enforceConst?: boolean
ignore?: (number | string)[]
ignoreArrayIndexes?: boolean
ignoreDefaultValues?: boolean
ignoreClassFieldInitialValues?: boolean
ignoreNumericLiteralTypes?: boolean
ignoreEnums?: boolean
ignoreReadonlyClassProperties?: boolean
ignoreTypeIndexes?: boolean
}
type TypescriptEslintNoMagicNumbers = [_TypescriptEslintNoMagicNumbers0, _TypescriptEslintNoMagicNumbers1]
// ----- @typescript-eslint/no-meaningless-void-operator -----
interface _TypescriptEslintNoMeaninglessVoidOperator0 {
checkNever?: boolean
}
interface _TypescriptEslintNoMeaninglessVoidOperator1 {
checkNever?: boolean
}
type TypescriptEslintNoMeaninglessVoidOperator = [_TypescriptEslintNoMeaninglessVoidOperator0, _TypescriptEslintNoMeaninglessVoidOperator1]
// ----- @typescript-eslint/no-misused-promises -----
interface _TypescriptEslintNoMisusedPromises0 {
checksConditionals?: boolean
checksVoidReturn?: (boolean | {
arguments?: boolean
attributes?: boolean
properties?: boolean
returns?: boolean
variables?: boolean
})
checksSpreads?: boolean
}
interface _TypescriptEslintNoMisusedPromises1 {
checksConditionals?: boolean
checksVoidReturn?: (boolean | {
arguments?: boolean
attributes?: boolean
properties?: boolean
returns?: boolean
variables?: boolean
})
checksSpreads?: boolean
}
type TypescriptEslintNoMisusedPromises = [_TypescriptEslintNoMisusedPromises0, _TypescriptEslintNoMisusedPromises1]
// ----- @typescript-eslint/no-namespace -----
interface _TypescriptEslintNoNamespace0 {
allowDeclarations?: boolean
allowDefinitionFiles?: boolean
}
interface _TypescriptEslintNoNamespace1 {
allowDeclarations?: boolean
allowDefinitionFiles?: boolean
}
type TypescriptEslintNoNamespace = [_TypescriptEslintNoNamespace0, _TypescriptEslintNoNamespace1]
// ----- @typescript-eslint/no-redeclare -----
interface _TypescriptEslintNoRedeclare0 {
builtinGlobals?: boolean
ignoreDeclarationMerge?: boolean
}
interface _TypescriptEslintNoRedeclare1 {
builtinGlobals?: boolean
ignoreDeclarationMerge?: boolean
}
type TypescriptEslintNoRedeclare = [_TypescriptEslintNoRedeclare0, _TypescriptEslintNoRedeclare1]
// ----- @typescript-eslint/no-require-imports -----
interface _TypescriptEslintNoRequireImports0 {
allow?: string[]
}
interface _TypescriptEslintNoRequireImports1 {
allow?: string[]
}
type TypescriptEslintNoRequireImports = [_TypescriptEslintNoRequireImports0, _TypescriptEslintNoRequireImports1]
// ----- @typescript-eslint/no-restricted-imports -----
type TypescriptEslintNoRestrictedImports = ((string | {
name: string
message?: string
importNames?: string[]
allowTypeImports?: boolean
})[] | []|[{
paths?: (string | {
name: string
message?: string
importNames?: string[]
allowTypeImports?: boolean
})[]
patterns?: (string[] | {
importNames?: [string, ...(string)[]]
group: [string, ...(string)[]]
importNamePattern?: string
message?: string
caseSensitive?: boolean
allowTypeImports?: boolean
}[])
}])
type TypescriptEslintNoRestrictedImports = TypescriptEslintNoRestrictedImports[]
// ----- @typescript-eslint/no-shadow -----
interface _TypescriptEslintNoShadow0 {
builtinGlobals?: boolean
hoist?: ("all" | "functions" | "never")
allow?: string[]
ignoreOnInitialization?: boolean
ignoreTypeValueShadow?: boolean
ignoreFunctionTypeParameterNameValueShadow?: boolean
}
interface _TypescriptEslintNoShadow1 {
builtinGlobals?: boolean
hoist?: ("all" | "functions" | "never")
allow?: string[]
ignoreOnInitialization?: boolean
ignoreTypeValueShadow?: boolean
ignoreFunctionTypeParameterNameValueShadow?: boolean
}
type TypescriptEslintNoShadow = [_TypescriptEslintNoShadow0, _TypescriptEslintNoShadow1]
// ----- @typescript-eslint/no-this-alias -----
interface _TypescriptEslintNoThisAlias0 {
allowDestructuring?: boolean
allowedNames?: string[]
}
interface _TypescriptEslintNoThisAlias1 {
allowDestructuring?: boolean
allowedNames?: string[]
}
type TypescriptEslintNoThisAlias = [_TypescriptEslintNoThisAlias0, _TypescriptEslintNoThisAlias1]
// ----- @typescript-eslint/no-throw-literal -----
interface _TypescriptEslintNoThrowLiteral0 {
allowThrowingAny?: boolean
allowThrowingUnknown?: boolean
}
interface _TypescriptEslintNoThrowLiteral1 {
allowThrowingAny?: boolean
allowThrowingUnknown?: boolean
}
type TypescriptEslintNoThrowLiteral = [_TypescriptEslintNoThrowLiteral0, _TypescriptEslintNoThrowLiteral1]
// ----- @typescript-eslint/no-type-alias -----
interface _TypescriptEslintNoTypeAlias0 {
allowAliases?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowCallbacks?: ("always" | "never")
allowConditionalTypes?: ("always" | "never")
allowConstructors?: ("always" | "never")
allowLiterals?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowMappedTypes?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowTupleTypes?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowGenerics?: ("always" | "never")
}
interface _TypescriptEslintNoTypeAlias1 {
allowAliases?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowCallbacks?: ("always" | "never")
allowConditionalTypes?: ("always" | "never")
allowConstructors?: ("always" | "never")
allowLiterals?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowMappedTypes?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowTupleTypes?: ("always" | "never" | "in-unions" | "in-intersections" | "in-unions-and-intersections")
allowGenerics?: ("always" | "never")
}
type TypescriptEslintNoTypeAlias = [_TypescriptEslintNoTypeAlias0, _TypescriptEslintNoTypeAlias1]
// ----- @typescript-eslint/no-unnecessary-boolean-literal-compare -----
interface _TypescriptEslintNoUnnecessaryBooleanLiteralCompare0 {
allowComparingNullableBooleansToTrue?: boolean
allowComparingNullableBooleansToFalse?: boolean
}
interface _TypescriptEslintNoUnnecessaryBooleanLiteralCompare1 {
allowComparingNullableBooleansToTrue?: boolean
allowComparingNullableBooleansToFalse?: boolean
}
type TypescriptEslintNoUnnecessaryBooleanLiteralCompare = [_TypescriptEslintNoUnnecessaryBooleanLiteralCompare0, _TypescriptEslintNoUnnecessaryBooleanLiteralCompare1]
// ----- @typescript-eslint/no-unnecessary-condition -----
interface _TypescriptEslintNoUnnecessaryCondition0 {
allowConstantLoopConditions?: boolean
allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean
}
interface _TypescriptEslintNoUnnecessaryCondition1 {
allowConstantLoopConditions?: boolean
allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean
}
type TypescriptEslintNoUnnecessaryCondition = [_TypescriptEslintNoUnnecessaryCondition0, _TypescriptEslintNoUnnecessaryCondition1]
// ----- @typescript-eslint/no-unnecessary-type-assertion -----
interface _TypescriptEslintNoUnnecessaryTypeAssertion0 {
typesToIgnore?: string[]
}
interface _TypescriptEslintNoUnnecessaryTypeAssertion1 {
typesToIgnore?: string[]
}
type TypescriptEslintNoUnnecessaryTypeAssertion = [_TypescriptEslintNoUnnecessaryTypeAssertion0, _TypescriptEslintNoUnnecessaryTypeAssertion1]
// ----- @typescript-eslint/no-unused-expressions -----
interface _TypescriptEslintNoUnusedExpressions0 {
allowShortCircuit?: boolean
allowTernary?: boolean
allowTaggedTemplates?: boolean
enforceForJSX?: boolean
}
interface _TypescriptEslintNoUnusedExpressions1 {
allowShortCircuit?: boolean
allowTernary?: boolean
allowTaggedTemplates?: boolean
enforceForJSX?: boolean
}
type TypescriptEslintNoUnusedExpressions = [_TypescriptEslintNoUnusedExpressions0, _TypescriptEslintNoUnusedExpressions1]
// ----- @typescript-eslint/no-unused-vars -----
type _TypescriptEslintNoUnusedVars0 = (("all" | "local") | {
vars?: ("all" | "local")
varsIgnorePattern?: string
args?: ("all" | "after-used" | "none")
ignoreRestSiblings?: boolean
argsIgnorePattern?: string
caughtErrors?: ("all" | "none")
caughtErrorsIgnorePattern?: string
destructuredArrayIgnorePattern?: string
})
type _TypescriptEslintNoUnusedVars1 = (("all" | "local") | {
vars?: ("all" | "local")
varsIgnorePattern?: string
args?: ("all" | "after-used" | "none")
ignoreRestSiblings?: boolean
argsIgnorePattern?: string
caughtErrors?: ("all" | "none")
caughtErrorsIgnorePattern?: string
destructuredArrayIgnorePattern?: string
})
type TypescriptEslintNoUnusedVars = [_TypescriptEslintNoUnusedVars0, _TypescriptEslintNoUnusedVars1]
// ----- @typescript-eslint/no-use-before-define -----
type _TypescriptEslintNoUseBeforeDefine0 = ("nofunc" | {
functions?: boolean
classes?: boolean
enums?: boolean
variables?: boolean
typedefs?: boolean
ignoreTypeReferences?: boolean
allowNamedExports?: boolean
})
type _TypescriptEslintNoUseBeforeDefine1 = ("nofunc" | {
functions?: boolean
classes?: boolean
enums?: boolean
variables?: boolean
typedefs?: boolean
ignoreTypeReferences?: boolean
allowNamedExports?: boolean
})
type TypescriptEslintNoUseBeforeDefine = [_TypescriptEslintNoUseBeforeDefine0, _TypescriptEslintNoUseBeforeDefine1]
// ----- @typescript-eslint/no-var-requires -----
interface _TypescriptEslintNoVarRequires0 {
allow?: string[]
}
interface _TypescriptEslintNoVarRequires1 {
allow?: string[]
}
type TypescriptEslintNoVarRequires = [_TypescriptEslintNoVarRequires0, _TypescriptEslintNoVarRequires1]
// ----- @typescript-eslint/object-curly-spacing -----
type _TypescriptEslintObjectCurlySpacing0 = ("always" | "never")
interface _TypescriptEslintObjectCurlySpacing1 {
arraysInObjects?: boolean
objectsInObjects?: boolean
}
type _TypescriptEslintObjectCurlySpacing2 = ("always" | "never")
interface _TypescriptEslintObjectCurlySpacing3 {
arraysInObjects?: boolean
objectsInObjects?: boolean
}
type TypescriptEslintObjectCurlySpacing = [_TypescriptEslintObjectCurlySpacing0, _TypescriptEslintObjectCurlySpacing1, _TypescriptEslintObjectCurlySpacing2, _TypescriptEslintObjectCurlySpacing3]
// ----- @typescript-eslint/only-throw-error -----
interface _TypescriptEslintOnlyThrowError0 {
allowThrowingAny?: boolean
allowThrowingUnknown?: boolean
}
interface _TypescriptEslintOnlyThrowError1 {
allowThrowingAny?: boolean
allowThrowingUnknown?: boolean
}
type TypescriptEslintOnlyThrowError = [_TypescriptEslintOnlyThrowError0, _TypescriptEslintOnlyThrowError1]
// ----- @typescript-eslint/padding-line-between-statements -----
type PaddingType = ("any" | "never" | "always" | "any" | "never" | "always")
type StatementType = (("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "interface" | "type") | [("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "interface" | "type"), ...(("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "interface" | "type"))[]] | ("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "interface" | "type") | [("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "interface" | "type"), ...(("*" | "block-like" | "exports" | "require" | "directive" | "expression" | "iife" | "multiline-block-like" | "multiline-expression" | "multiline-const" | "multiline-let" | "multiline-var" | "singleline-const" | "singleline-let" | "singleline-var" | "block" | "empty" | "function" | "break" | "case" | "class" | "const" | "continue" | "debugger" | "default" | "do" | "export" | "for" | "if" | "import" | "let" | "return" | "switch" | "throw" | "try" | "var" | "while" | "with" | "interface" | "type"))[]])
type TypescriptEslintPaddingLineBetweenStatements = {
blankLine: PaddingType
prev: StatementType
next: StatementType
}[]
type TypescriptEslintPaddingLineBetweenStatements = TypescriptEslintPaddingLineBetweenStatements[]
// ----- @typescript-eslint/parameter-properties -----
type Modifier = ("readonly" | "private" | "protected" | "public" | "private readonly" | "protected readonly" | "public readonly")
interface _TypescriptEslintParameterProperties0 {
allow?: Modifier[]
prefer?: ("class-property" | "parameter-property")
}
type Modifier = ("readonly" | "private" | "protected" | "public" | "private readonly" | "protected readonly" | "public readonly")
interface _TypescriptEslintParameterProperties1 {
allow?: Modifier[]
prefer?: ("class-property" | "parameter-property")
}
type TypescriptEslintParameterProperties = [_TypescriptEslintParameterProperties0, _TypescriptEslintParameterProperties1]
// ----- @typescript-eslint/prefer-destructuring -----
type _TypescriptEslintPreferDestructuring0 = ({
VariableDeclarator?: {
array?: boolean
object?: boolean
}
AssignmentExpression?: {
array?: boolean
object?: boolean
}
} | {
array?: boolean
object?: boolean
})
interface _TypescriptEslintPreferDestructuring1 {
enforceForRenamedProperties?: boolean
enforceForDeclarationWithTypeAnnotation?: boolean
[k: string]: unknown
}
type _TypescriptEslintPreferDestructuring2 = ({
VariableDeclarator?: {
array?: boolean
object?: boolean
}
AssignmentExpression?: {
array?: boolean
object?: boolean
}
} | {
array?: boolean
object?: boolean
})
interface _TypescriptEslintPreferDestructuring3 {
enforceForRenamedProperties?: boolean
enforceForDeclarationWithTypeAnnotation?: boolean
[k: string]: unknown
}
type TypescriptEslintPreferDestructuring = [_TypescriptEslintPreferDestructuring0, _TypescriptEslintPreferDestructuring1, _TypescriptEslintPreferDestructuring2, _TypescriptEslintPreferDestructuring3]
// ----- @typescript-eslint/prefer-literal-enum-member -----
interface _TypescriptEslintPreferLiteralEnumMember0 {
allowBitwiseExpressions?: boolean
}
interface _TypescriptEslintPreferLiteralEnumMember1 {
allowBitwiseExpressions?: boolean
}
type TypescriptEslintPreferLiteralEnumMember = [_TypescriptEslintPreferLiteralEnumMember0, _TypescriptEslintPreferLiteralEnumMember1]
// ----- @typescript-eslint/prefer-nullish-coalescing -----
interface _TypescriptEslintPreferNullishCoalescing0 {
allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean
ignoreConditionalTests?: boolean
ignoreMixedLogicalExpressions?: boolean
ignorePrimitives?: ({
bigint?: boolean
boolean?: boolean
number?: boolean
string?: boolean
[k: string]: unknown
} | true)
ignoreTernaryTests?: boolean
}
interface _TypescriptEslintPreferNullishCoalescing1 {
allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean
ignoreConditionalTests?: boolean
ignoreMixedLogicalExpressions?: boolean
ignorePrimitives?: ({
bigint?: boolean
boolean?: boolean
number?: boolean
string?: boolean
[k: string]: unknown
} | true)
ignoreTernaryTests?: boolean
}
type TypescriptEslintPreferNullishCoalescing = [_TypescriptEslintPreferNullishCoalescing0, _TypescriptEslintPreferNullishCoalescing1]
// ----- @typescript-eslint/prefer-optional-chain -----
interface _TypescriptEslintPreferOptionalChain0 {
checkAny?: boolean
checkUnknown?: boolean
checkString?: boolean
checkNumber?: boolean
checkBoolean?: boolean
checkBigInt?: boolean
requireNullish?: boolean
allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing?: boolean
}
interface _TypescriptEslintPreferOptionalChain1 {
checkAny?: boolean
checkUnknown?: boolean
checkString?: boolean
checkNumber?: boolean
checkBoolean?: boolean
checkBigInt?: boolean
requireNullish?: boolean
allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing?: boolean
}
type TypescriptEslintPreferOptionalChain = [_TypescriptEslintPreferOptionalChain0, _TypescriptEslintPreferOptionalChain1]
// ----- @typescript-eslint/prefer-promise-reject-errors -----
interface _TypescriptEslintPreferPromiseRejectErrors0 {
allowEmptyReject?: boolean
}
interface _TypescriptEslintPreferPromiseRejectErrors1 {
allowEmptyReject?: boolean
}
type TypescriptEslintPreferPromiseRejectErrors = [_TypescriptEslintPreferPromiseRejectErrors0, _TypescriptEslintPreferPromiseRejectErrors1]
// ----- @typescript-eslint/prefer-readonly -----
interface _TypescriptEslintPreferReadonly0 {
onlyInlineLambdas?: boolean
}
interface _TypescriptEslintPreferReadonly1 {
onlyInlineLambdas?: boolean
}
type TypescriptEslintPreferReadonly = [_TypescriptEslintPreferReadonly0, _TypescriptEslintPreferReadonly1]
// ----- @typescript-eslint/prefer-readonly-parameter-types -----
interface _TypescriptEslintPreferReadonlyParameterTypes0 {
allow?: (string | {
from: "file"
name: (string | [string, ...(string)[]])
path?: string
} | {
from: "lib"
name: (string | [string, ...(string)[]])
} | {
from: "package"
name: (string | [string, ...(string)[]])
package: string
})[]
checkParameterProperties?: boolean
ignoreInferredTypes?: boolean
treatMethodsAsReadonly?: boolean
}
interface _TypescriptEslintPreferReadonlyParameterTypes1 {
allow?: (string | {
from: "file"
name: (string | [string, ...(string)[]])
path?: string
} | {
from: "lib"
name: (string | [string, ...(string)[]])
} | {
from: "package"
name: (string | [string, ...(string)[]])
package: string
})[]
checkParameterProperties?: boolean
ignoreInferredTypes?: boolean
treatMethodsAsReadonly?: boolean
}
type TypescriptEslintPreferReadonlyParameterTypes = [_TypescriptEslintPreferReadonlyParameterTypes0, _TypescriptEslintPreferReadonlyParameterTypes1]
// ----- @typescript-eslint/prefer-string-starts-ends-with -----
interface _TypescriptEslintPreferStringStartsEndsWith0 {
allowSingleElementEquality?: ("always" | "never")
}
interface _TypescriptEslintPreferStringStartsEndsWith1 {
allowSingleElementEquality?: ("always" | "never")
}
type TypescriptEslintPreferStringStartsEndsWith = [_TypescriptEslintPreferStringStartsEndsWith0, _TypescriptEslintPreferStringStartsEndsWith1]
// ----- @typescript-eslint/promise-function-async -----
interface _TypescriptEslintPromiseFunctionAsync0 {
allowAny?: boolean
allowedPromiseNames?: string[]
checkArrowFunctions?: boolean
checkFunctionDeclarations?: boolean
checkFunctionExpressions?: boolean
checkMethodDeclarations?: boolean
}
interface _TypescriptEslintPromiseFunctionAsync1 {
allowAny?: boolean
allowedPromiseNames?: string[]
checkArrowFunctions?: boolean
checkFunctionDeclarations?: boolean
checkFunctionExpressions?: boolean
checkMethodDeclarations?: boolean
}
type TypescriptEslintPromiseFunctionAsync = [_TypescriptEslintPromiseFunctionAsync0, _TypescriptEslintPromiseFunctionAsync1]
// ----- @typescript-eslint/quotes -----
type _TypescriptEslintQuotes0 = ("single" | "double" | "backtick")
type _TypescriptEslintQuotes1 = ("avoid-escape" | {
avoidEscape?: boolean
allowTemplateLiterals?: boolean
})
type _TypescriptEslintQuotes2 = ("single" | "double" | "backtick")
type _TypescriptEslintQuotes3 = ("avoid-escape" | {
avoidEscape?: boolean
allowTemplateLiterals?: boolean
})
type TypescriptEslintQuotes = [_TypescriptEslintQuotes0, _TypescriptEslintQuotes1, _TypescriptEslintQuotes2, _TypescriptEslintQuotes3]
// ----- @typescript-eslint/require-array-sort-compare -----
interface _TypescriptEslintRequireArraySortCompare0 {
ignoreStringArrays?: boolean
}
interface _TypescriptEslintRequireArraySortCompare1 {
ignoreStringArrays?: boolean
}
type TypescriptEslintRequireArraySortCompare = [_TypescriptEslintRequireArraySortCompare0, _TypescriptEslintRequireArraySortCompare1]
// ----- @typescript-eslint/restrict-plus-operands -----
interface _TypescriptEslintRestrictPlusOperands0 {
allowAny?: boolean
allowBoolean?: boolean
allowNullish?: boolean
allowNumberAndString?: boolean
allowRegExp?: boolean
skipCompoundAssignments?: boolean
}
interface _TypescriptEslintRestrictPlusOperands1 {
allowAny?: boolean
allowBoolean?: boolean
allowNullish?: boolean
allowNumberAndString?: boolean
allowRegExp?: boolean
skipCompoundAssignments?: boolean
}
type TypescriptEslintRestrictPlusOperands = [_TypescriptEslintRestrictPlusOperands0, _TypescriptEslintRestrictPlusOperands1]
// ----- @typescript-eslint/restrict-template-expressions -----
interface _TypescriptEslintRestrictTemplateExpressions0 {
allowAny?: boolean
allowArray?: boolean
allowBoolean?: boolean
allowNullish?: boolean
allowNumber?: boolean
allowRegExp?: boolean
allowNever?: boolean
}
interface _TypescriptEslintRestrictTemplateExpressions1 {
allowAny?: boolean
allowArray?: boolean
allowBoolean?: boolean
allowNullish?: boolean
allowNumber?: boolean
allowRegExp?: boolean
allowNever?: boolean
}
type TypescriptEslintRestrictTemplateExpressions = [_TypescriptEslintRestrictTemplateExpressions0, _TypescriptEslintRestrictTemplateExpressions1]
// ----- @typescript-eslint/return-await -----
type _TypescriptEslintReturnAwait0 = ("in-try-catch" | "always" | "never")
type _TypescriptEslintReturnAwait1 = ("in-try-catch" | "always" | "never")
type TypescriptEslintReturnAwait = [_TypescriptEslintReturnAwait0, _TypescriptEslintReturnAwait1]
// ----- @typescript-eslint/semi -----
type TypescriptEslintSemi = ([]|["never"]|["never", {
beforeStatementContinuationChars?: ("always" | "any" | "never")
}] | []|["always"]|["always", {
omitLastInOneLineBlock?: boolean
omitLastInOneLineClassBody?: boolean
}])
type TypescriptEslintSemi = TypescriptEslintSemi[]
// ----- @typescript-eslint/sort-type-constituents -----
interface _TypescriptEslintSortTypeConstituents0 {
checkIntersections?: boolean
checkUnions?: boolean
groupOrder?: ("conditional" | "function" | "import" | "intersection" | "keyword" | "nullish" | "literal" | "named" | "object" | "operator" | "tuple" | "union")[]
}
interface _TypescriptEslintSortTypeConstituents1 {
checkIntersections?: boolean
checkUnions?: boolean
groupOrder?: ("conditional" | "function" | "import" | "intersection" | "keyword" | "nullish" | "literal" | "named" | "object" | "operator" | "tuple" | "union")[]
}
type TypescriptEslintSortTypeConstituents = [_TypescriptEslintSortTypeConstituents0, _TypescriptEslintSortTypeConstituents1]
// ----- @typescript-eslint/space-before-blocks -----
type _TypescriptEslintSpaceBeforeBlocks0 = (("always" | "never") | {
keywords?: ("always" | "never" | "off")
functions?: ("always" | "never" | "off")
classes?: ("always" | "never" | "off")
})
type _TypescriptEslintSpaceBeforeBlocks1 = (("always" | "never") | {
keywords?: ("always" | "never" | "off")
functions?: ("always" | "never" | "off")
classes?: ("always" | "never" | "off")
})
type TypescriptEslintSpaceBeforeBlocks = [_TypescriptEslintSpaceBeforeBlocks0, _TypescriptEslintSpaceBeforeBlocks1]
// ----- @typescript-eslint/space-before-function-paren -----
type _TypescriptEslintSpaceBeforeFunctionParen0 = (("always" | "never") | {
anonymous?: ("always" | "never" | "ignore")
named?: ("always" | "never" | "ignore")
asyncArrow?: ("always" | "never" | "ignore")
})
type _TypescriptEslintSpaceBeforeFunctionParen1 = (("always" | "never") | {
anonymous?: ("always" | "never" | "ignore")
named?: ("always" | "never" | "ignore")
asyncArrow?: ("always" | "never" | "ignore")
})
type TypescriptEslintSpaceBeforeFunctionParen = [_TypescriptEslintSpaceBeforeFunctionParen0, _TypescriptEslintSpaceBeforeFunctionParen1]
// ----- @typescript-eslint/space-infix-ops -----
interface _TypescriptEslintSpaceInfixOps0 {
int32Hint?: boolean
}
interface _TypescriptEslintSpaceInfixOps1 {
int32Hint?: boolean
}
type TypescriptEslintSpaceInfixOps = [_TypescriptEslintSpaceInfixOps0, _TypescriptEslintSpaceInfixOps1]
// ----- @typescript-eslint/strict-boolean-expressions -----
interface _TypescriptEslintStrictBooleanExpressions0 {
allowString?: boolean
allowNumber?: boolean
allowNullableObject?: boolean
allowNullableBoolean?: boolean
allowNullableString?: boolean
allowNullableNumber?: boolean
allowNullableEnum?: boolean
allowAny?: boolean
allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean
}
interface _TypescriptEslintStrictBooleanExpressions1 {
allowString?: boolean
allowNumber?: boolean
allowNullableObject?: boolean
allowNullableBoolean?: boolean
allowNullableString?: boolean
allowNullableNumber?: boolean
allowNullableEnum?: boolean
allowAny?: boolean
allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean
}
type TypescriptEslintStrictBooleanExpressions = [_TypescriptEslintStrictBooleanExpressions0, _TypescriptEslintStrictBooleanExpressions1]
// ----- @typescript-eslint/switch-exhaustiveness-check -----
interface _TypescriptEslintSwitchExhaustivenessCheck0 {
allowDefaultCaseForExhaustiveSwitch?: boolean
requireDefaultForNonUnion?: boolean
}
interface _TypescriptEslintSwitchExhaustivenessCheck1 {
allowDefaultCaseForExhaustiveSwitch?: boolean
requireDefaultForNonUnion?: boolean
}
type TypescriptEslintSwitchExhaustivenessCheck = [_TypescriptEslintSwitchExhaustivenessCheck0, _TypescriptEslintSwitchExhaustivenessCheck1]
// ----- @typescript-eslint/triple-slash-reference -----
interface _TypescriptEslintTripleSlashReference0 {
lib?: ("always" | "never")
path?: ("always" | "never")
types?: ("always" | "never" | "prefer-import")
}
interface _TypescriptEslintTripleSlashReference1 {
lib?: ("always" | "never")
path?: ("always" | "never")
types?: ("always" | "never" | "prefer-import")
}
type TypescriptEslintTripleSlashReference = [_TypescriptEslintTripleSlashReference0, _TypescriptEslintTripleSlashReference1]
// ----- @typescript-eslint/type-annotation-spacing -----
interface _TypescriptEslintTypeAnnotationSpacing0 {
before?: boolean
after?: boolean
overrides?: {
colon?: SpacingConfig
arrow?: SpacingConfig
variable?: SpacingConfig
parameter?: SpacingConfig
property?: SpacingConfig
returnType?: SpacingConfig
}
}
interface SpacingConfig {
before?: boolean
after?: boolean
}
interface _TypescriptEslintTypeAnnotationSpacing1 {
before?: boolean
after?: boolean
overrides?: {
colon?: SpacingConfig
arrow?: SpacingConfig
variable?: SpacingConfig
parameter?: SpacingConfig
property?: SpacingConfig
returnType?: SpacingConfig
}
}
interface SpacingConfig {
before?: boolean
after?: boolean
}
type TypescriptEslintTypeAnnotationSpacing = [_TypescriptEslintTypeAnnotationSpacing0, _TypescriptEslintTypeAnnotationSpacing1]
// ----- @typescript-eslint/typedef -----
interface _TypescriptEslintTypedef0 {
arrayDestructuring?: boolean
arrowParameter?: boolean
memberVariableDeclaration?: boolean
objectDestructuring?: boolean
parameter?: boolean
propertyDeclaration?: boolean
variableDeclaration?: boolean
variableDeclarationIgnoreFunction?: boolean
}
interface _TypescriptEslintTypedef1 {
arrayDestructuring?: boolean
arrowParameter?: boolean
memberVariableDeclaration?: boolean
objectDestructuring?: boolean
parameter?: boolean
propertyDeclaration?: boolean
variableDeclaration?: boolean
variableDeclarationIgnoreFunction?: boolean
}
type TypescriptEslintTypedef = [_TypescriptEslintTypedef0, _TypescriptEslintTypedef1]
// ----- @typescript-eslint/unbound-method -----
interface _TypescriptEslintUnboundMethod0 {
ignoreStatic?: boolean
}
interface _TypescriptEslintUnboundMethod1 {
ignoreStatic?: boolean
}
type TypescriptEslintUnboundMethod = [_TypescriptEslintUnboundMethod0, _TypescriptEslintUnboundMethod1]
// ----- @typescript-eslint/unified-signatures -----
interface _TypescriptEslintUnifiedSignatures0 {
ignoreDifferentlyNamedParameters?: boolean
}
interface _TypescriptEslintUnifiedSignatures1 {
ignoreDifferentlyNamedParameters?: boolean
}
type TypescriptEslintUnifiedSignatures = [_TypescriptEslintUnifiedSignatures0, _TypescriptEslintUnifiedSignatures1]
// ----- antfu/consistent-list-newline -----
interface _AntfuConsistentListNewline0 {
ArrayExpression?: boolean
ArrowFunctionExpression?: boolean
CallExpression?: boolean
ExportNamedDeclaration?: boolean
FunctionDeclaration?: boolean
FunctionExpression?: boolean
ImportDeclaration?: boolean
NewExpression?: boolean
ObjectExpression?: boolean
TSInterfaceDeclaration?: boolean
TSTupleType?: boolean
TSTypeLiteral?: boolean
TSTypeParameterDeclaration?: boolean
TSTypeParameterInstantiation?: boolean
ObjectPattern?: boolean
ArrayPattern?: boolean
}
type AntfuConsistentListNewline = [_AntfuConsistentListNewline0]
// ----- format/dprint -----
interface _FormatDprint0 {
language?: string
languageOptions?: {
[k: string]: unknown
}
[k: string]: unknown
}
type FormatDprint = [_FormatDprint0]
// ----- format/prettier -----
interface _FormatPrettier0 {
parser?: string
[k: string]: unknown
}
type FormatPrettier = [_FormatPrettier0]
// ----- import-x/consistent-type-specifier-style -----
type _ImportXConsistentTypeSpecifierStyle0 = ("prefer-inline" | "prefer-top-level")
type ImportXConsistentTypeSpecifierStyle = [_ImportXConsistentTypeSpecifierStyle0]
// ----- import-x/dynamic-import-chunkname -----
interface _ImportXDynamicImportChunkname0 {
importFunctions?: string[]
allowEmpty?: boolean
webpackChunknameFormat?: string
[k: string]: unknown
}
type ImportXDynamicImportChunkname = [_ImportXDynamicImportChunkname0]
// ----- import-x/extensions -----
type ImportXExtensions = ([]|[("always" | "ignorePackages" | "never")] | []|[("always" | "ignorePackages" | "never")]|[("always" | "ignorePackages" | "never"), {
pattern?: {
[k: string]: ("always" | "ignorePackages" | "never")
}
ignorePackages?: boolean
[k: string]: unknown
}] | []|[{
pattern?: {
[k: string]: ("always" | "ignorePackages" | "never")
}
ignorePackages?: boolean
[k: string]: unknown
}] | []|[{
[k: string]: ("always" | "ignorePackages" | "never")
}] | []|[("always" | "ignorePackages" | "never")]|[("always" | "ignorePackages" | "never"), {
[k: string]: ("always" | "ignorePackages" | "never")
}])
type ImportXExtensions = ImportXExtensions[]
// ----- import-x/first -----
type _ImportXFirst0 = ("absolute-first" | "disable-absolute-first")
type ImportXFirst = [_ImportXFirst0]
// ----- import-x/group-exports -----
interface ImportXGroupExports {
[k: string]: unknown
}
type ImportXGroupExports = ImportXGroupExports[]
// ----- import-x/imports-first -----
type _ImportXImportsFirst0 = ("absolute-first" | "disable-absolute-first")
type ImportXImportsFirst = [_ImportXImportsFirst0]
// ----- import-x/max-dependencies -----
interface _ImportXMaxDependencies0 {
max?: number
ignoreTypeImports?: boolean
}
type ImportXMaxDependencies = [_ImportXMaxDependencies0]
// ----- import-x/named -----
interface _ImportXNamed0 {
commonjs?: boolean
}
type ImportXNamed = [_ImportXNamed0]
// ----- import-x/namespace -----
interface _ImportXNamespace0 {
allowComputed?: boolean
}
type ImportXNamespace = [_ImportXNamespace0]
// ----- import-x/newline-after-import -----
interface _ImportXNewlineAfterImport0 {
count?: number
exactCount?: boolean
considerComments?: boolean
}
type ImportXNewlineAfterImport = [_ImportXNewlineAfterImport0]
// ----- import-x/no-absolute-path -----
interface _ImportXNoAbsolutePath0 {
commonjs?: boolean
amd?: boolean
esmodule?: boolean
ignore?: [string, ...(string)[]]
}
type ImportXNoAbsolutePath = [_ImportXNoAbsolutePath0]
// ----- import-x/no-anonymous-default-export -----
interface _ImportXNoAnonymousDefaultExport0 {
allowArray?: boolean
allowArrowFunction?: boolean
allowCallExpression?: boolean
allowAnonymousClass?: boolean
allowAnonymousFunction?: boolean
allowLiteral?: boolean
allowObject?: boolean
allowNew?: boolean
}
type ImportXNoAnonymousDefaultExport = [_ImportXNoAnonymousDefaultExport0]
// ----- import-x/no-commonjs -----
type ImportXNoCommonjs = ([]|["allow-primitive-modules"] | []|[{
allowPrimitiveModules?: boolean
allowRequire?: boolean
allowConditionalRequire?: boolean
}])
type ImportXNoCommonjs = ImportXNoCommonjs[]
// ----- import-x/no-cycle -----
interface _ImportXNoCycle0 {
commonjs?: boolean
amd?: boolean
esmodule?: boolean
ignore?: [string, ...(string)[]]
maxDepth?: (number | "∞")
ignoreExternal?: boolean
allowUnsafeDynamicCyclicDependency?: boolean
}
type ImportXNoCycle = [_ImportXNoCycle0]
// ----- import-x/no-duplicates -----
interface _ImportXNoDuplicates0 {
considerQueryString?: boolean
"prefer-inline"?: boolean
}
type ImportXNoDuplicates = [_ImportXNoDuplicates0]
// ----- import-x/no-dynamic-require -----
interface _ImportXNoDynamicRequire0 {
esmodule?: boolean
}
type ImportXNoDynamicRequire = [_ImportXNoDynamicRequire0]
// ----- import-x/no-extraneous-dependencies -----
interface _ImportXNoExtraneousDependencies0 {
devDependencies?: (boolean | unknown[])
optionalDependencies?: (boolean | unknown[])
peerDependencies?: (boolean | unknown[])
bundledDependencies?: (boolean | unknown[])
packageDir?: (string | unknown[])
includeInternal?: boolean
includeTypes?: boolean
}
type ImportXNoExtraneousDependencies = [_ImportXNoExtraneousDependencies0]
// ----- import-x/no-import-module-exports -----
interface _ImportXNoImportModuleExports0 {
exceptions?: unknown[]
}
type ImportXNoImportModuleExports = [_ImportXNoImportModuleExports0]
// ----- import-x/no-internal-modules -----
type _ImportXNoInternalModules0 = ({
allow?: string[]
} | {
forbid?: string[]
})
type ImportXNoInternalModules = [_ImportXNoInternalModules0]
// ----- import-x/no-namespace -----
interface _ImportXNoNamespace0 {
ignore?: string[]
[k: string]: unknown
}
type ImportXNoNamespace = [_ImportXNoNamespace0]
// ----- import-x/no-nodejs-modules -----
interface _ImportXNoNodejsModules0 {
allow?: string[]
}
type ImportXNoNodejsModules = [_ImportXNoNodejsModules0]
// ----- import-x/no-relative-packages -----
interface _ImportXNoRelativePackages0 {
commonjs?: boolean
amd?: boolean
esmodule?: boolean
ignore?: [string, ...(string)[]]
}
type ImportXNoRelativePackages = [_ImportXNoRelativePackages0]
// ----- import-x/no-relative-parent-imports -----
interface _ImportXNoRelativeParentImports0 {
commonjs?: boolean
amd?: boolean
esmodule?: boolean
ignore?: [string, ...(string)[]]
}
type ImportXNoRelativeParentImports = [_ImportXNoRelativeParentImports0]
// ----- import-x/no-restricted-paths -----
interface _ImportXNoRestrictedPaths0 {
zones?: [{
target?: (string | string[])
from?: (string | string[])
except?: string[]
message?: string
}, ...({
target?: (string | string[])
from?: (string | string[])
except?: string[]
message?: string
})[]]
basePath?: string
}
type ImportXNoRestrictedPaths = [_ImportXNoRestrictedPaths0]
// ----- import-x/no-unassigned-import -----
interface _ImportXNoUnassignedImport0 {
devDependencies?: (boolean | unknown[])
optionalDependencies?: (boolean | unknown[])
peerDependencies?: (boolean | unknown[])
allow?: string[]
}
type ImportXNoUnassignedImport = [_ImportXNoUnassignedImport0]
// ----- import-x/no-unresolved -----
interface _ImportXNoUnresolved0 {
commonjs?: boolean
amd?: boolean
esmodule?: boolean
ignore?: [string, ...(string)[]]
caseSensitive?: boolean
caseSensitiveStrict?: boolean
}
type ImportXNoUnresolved = [_ImportXNoUnresolved0]
// ----- import-x/no-unused-modules -----
type _ImportXNoUnusedModules0 = (({
unusedExports: true
src?: {
[k: string]: unknown
}
[k: string]: unknown
} | {
missingExports: true
[k: string]: unknown
}) & {
src?: string[]
ignoreExports?: string[]
missingExports?: boolean
unusedExports?: boolean
[k: string]: unknown
})
type ImportXNoUnusedModules = [_ImportXNoUnusedModules0]
// ----- import-x/no-useless-path-segments -----
interface _ImportXNoUselessPathSegments0 {
commonjs?: boolean
noUselessIndex?: boolean
}
type ImportXNoUselessPathSegments = [_ImportXNoUselessPathSegments0]
// ----- import-x/order -----
interface _ImportXOrder0 {
groups?: unknown[]
pathGroupsExcludedImportTypes?: unknown[]
distinctGroup?: boolean
pathGroups?: {
pattern: string
patternOptions?: {
[k: string]: unknown
}
group: ("builtin" | "external" | "internal" | "unknown" | "parent" | "sibling" | "index" | "object" | "type")
position?: ("after" | "before")
}[]
"newlines-between"?: ("ignore" | "always" | "always-and-inside-groups" | "never")
alphabetize?: {
caseInsensitive?: boolean
order?: ("ignore" | "asc" | "desc")
orderImportKind?: ("ignore" | "asc" | "desc")
}
warnOnUnassignedImports?: boolean
}
type ImportXOrder = [_ImportXOrder0]
// ----- import-x/prefer-default-export -----
interface _ImportXPreferDefaultExport0 {
target?: ("single" | "any")
}
type ImportXPreferDefaultExport = [_ImportXPreferDefaultExport0]
// ----- jsonc/array-bracket-newline -----
type _JsoncArrayBracketNewline0 = (("always" | "never" | "consistent") | {
multiline?: boolean
minItems?: (number | null)
})
type JsoncArrayBracketNewline = [_JsoncArrayBracketNewline0]
// ----- jsonc/array-bracket-spacing -----
type _JsoncArrayBracketSpacing0 = ("always" | "never")
interface _JsoncArrayBracketSpacing1 {
singleValue?: boolean
objectsInArrays?: boolean
arraysInArrays?: boolean
}
type JsoncArrayBracketSpacing = [_JsoncArrayBracketSpacing0, _JsoncArrayBracketSpacing1]
// ----- jsonc/array-element-newline -----
type JsoncArrayElementNewline = []|[(BasicConfig | {
ArrayExpression?: BasicConfig
JSONArrayExpression?: BasicConfig
ArrayPattern?: BasicConfig
})]
type BasicConfig = (("always" | "never" | "consistent") | {
multiline?: boolean
minItems?: (number | null)
})
type JsoncArrayElementNewline = JsoncArrayElementNewline[]
// ----- jsonc/comma-dangle -----
type JsoncCommaDangle = []|[(Value | {
arrays?: ValueWithIgnore
objects?: ValueWithIgnore
imports?: ValueWithIgnore
exports?: ValueWithIgnore
functions?: ValueWithIgnore
})]
type Value = ("always-multiline" | "always" | "never" | "only-multiline")
type ValueWithIgnore = ("always-multiline" | "always" | "ignore" | "never" | "only-multiline")
type JsoncCommaDangle = JsoncCommaDangle[]
// ----- jsonc/comma-style -----
type _JsoncCommaStyle0 = ("first" | "last")
interface _JsoncCommaStyle1 {
exceptions?: {
[k: string]: boolean
}
}
type JsoncCommaStyle = [_JsoncCommaStyle0, _JsoncCommaStyle1]
// ----- jsonc/indent -----
type _JsoncIndent0 = ("tab" | number)
interface _JsoncIndent1 {
SwitchCase?: number
VariableDeclarator?: ((number | ("first" | "off")) | {
var?: (number | ("first" | "off"))
let?: (number | ("first" | "off"))
const?: (number | ("first" | "off"))
})
outerIIFEBody?: (number | "off")
MemberExpression?: (number | "off")
FunctionDeclaration?: {
parameters?: (number | ("first" | "off"))
body?: number
}
FunctionExpression?: {
parameters?: (number | ("first" | "off"))
body?: number
}
StaticBlock?: {
body?: number
}
CallExpression?: {
arguments?: (number | ("first" | "off"))
}
ArrayExpression?: (number | ("first" | "off"))
ObjectExpression?: (number | ("first" | "off"))
ImportDeclaration?: (number | ("first" | "off"))
flatTernaryExpressions?: boolean
offsetTernaryExpressions?: boolean
ignoredNodes?: string[]
ignoreComments?: boolean
}
type JsoncIndent = [_JsoncIndent0, _JsoncIndent1]
// ----- jsonc/key-name-casing -----
interface _JsoncKeyNameCasing0 {
camelCase?: boolean
PascalCase?: boolean
SCREAMING_SNAKE_CASE?: boolean
"kebab-case"?: boolean
snake_case?: boolean
ignores?: string[]
}
type JsoncKeyNameCasing = [_JsoncKeyNameCasing0]
// ----- jsonc/key-spacing -----
type _JsoncKeySpacing0 = ({
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
align?: (("colon" | "value") | {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
})
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
} | {
singleLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
multiLine?: {
mode?: ("strict" | "minimum")
beforeColon?: boolean
afterColon?: boolean
}
align?: {
mode?: ("strict" | "minimum")
on?: ("colon" | "value")
beforeColon?: boolean
afterColon?: boolean
}
})
type JsoncKeySpacing = [_JsoncKeySpacing0]
// ----- jsonc/no-irregular-whitespace -----
interface _JsoncNoIrregularWhitespace0 {
skipComments?: boolean
skipStrings?: boolean
skipTemplates?: boolean
skipRegExps?: boolean
skipJSXText?: boolean
}
type JsoncNoIrregularWhitespace = [_JsoncNoIrregularWhitespace0]
// ----- jsonc/object-curly-newline -----
type _JsoncObjectCurlyNewline0 = ((("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
}) | {
ObjectExpression?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
ObjectPattern?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
ImportDeclaration?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
ExportDeclaration?: (("always" | "never") | {
multiline?: boolean
minProperties?: number
consistent?: boolean
})
})
type JsoncObjectCurlyNewline = [_JsoncObjectCurlyNewline0]
// ----- jsonc/object-curly-spacing -----
type _JsoncObjectCurlySpacing0 = ("always" | "never")
interface _JsoncObjectCurlySpacing1 {
arraysInObjects?: boolean
objectsInObjects?: boolean
}
type JsoncObjectCurlySpacing = [_JsoncObjectCurlySpacing0, _JsoncObjectCurlySpacing1]
// ----- jsonc/object-property-newline -----
interface _JsoncObjectPropertyNewline0 {
allowAllPropertiesOnSameLine?: boolean
allowMultiplePropertiesPerLine?: boolean
}
type JsoncObjectPropertyNewline = [_JsoncObjectPropertyNewline0]
// ----- jsonc/quote-props -----
type JsoncQuoteProps = ([]|[("always" | "as-needed" | "consistent" | "consistent-as-needed")] | []|[("always" | "as-needed" | "consistent" | "consistent-as-needed")]|[("always" | "as-needed" | "consistent" | "consistent-as-needed"), {
keywords?: boolean
unnecessary?: boolean
numbers?: boolean
}])
type JsoncQuoteProps = JsoncQuoteProps[]
// ----- jsonc/quotes -----
type _JsoncQuotes0 = ("single" | "double" | "backtick")
type _JsoncQuotes1 = ("avoid-escape" | {
avoidEscape?: boolean
allowTemplateLiterals?: boolean
})
type JsoncQuotes = [_JsoncQuotes0, _JsoncQuotes1]
// ----- jsonc/sort-array-values -----
type JsoncSortArrayValues = [{
pathPattern: string
order: ((string | {
valuePattern?: string
order?: {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
}
})[] | {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
})
minValues?: number
}, ...({
pathPattern: string
order: ((string | {
valuePattern?: string
order?: {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
}
})[] | {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
})
minValues?: number
})[]]
type JsoncSortArrayValues = JsoncSortArrayValues[]
// ----- jsonc/sort-keys -----
type JsoncSortKeys = ([{
pathPattern: string
hasProperties?: string[]
order: ((string | {
keyPattern?: string
order?: {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
}
})[] | {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
})
minKeys?: number
allowLineSeparatedGroups?: boolean
}, ...({
pathPattern: string
hasProperties?: string[]
order: ((string | {
keyPattern?: string
order?: {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
}
})[] | {
type?: ("asc" | "desc")
caseSensitive?: boolean
natural?: boolean
})
minKeys?: number
allowLineSeparatedGroups?: boolean
})[]] | []|[("asc" | "desc")]|[("asc" | "desc"), {
caseSensitive?: boolean
natural?: boolean
minKeys?: number
allowLineSeparatedGroups?: boolean
}])
type JsoncSortKeys = JsoncSortKeys[]
// ----- jsonc/space-unary-ops -----
interface _JsoncSpaceUnaryOps0 {
words?: boolean
nonwords?: boolean
overrides?: {
[k: string]: boolean
}
}
type JsoncSpaceUnaryOps = [_JsoncSpaceUnaryOps0]
// ----- react-hooks/exhaustive-deps -----
interface _ReactHooksExhaustiveDeps0 {
additionalHooks?: string
enableDangerousAutofixThisMayCauseInfiniteLoops?: boolean
}
type ReactHooksExhaustiveDeps = [_ReactHooksExhaustiveDeps0]
// ----- simple-import-sort/imports -----
interface _SimpleImportSortImports0 {
groups?: string[][]
}
type SimpleImportSortImports = [_SimpleImportSortImports0]
// ----- unicorn/better-regex -----
interface _UnicornBetterRegex0 {
sortCharacterClasses?: boolean
}
type UnicornBetterRegex = [_UnicornBetterRegex0]
// ----- unicorn/catch-error-name -----
interface _UnicornCatchErrorName0 {
name?: string
ignore?: unknown[]
}
type UnicornCatchErrorName = [_UnicornCatchErrorName0]
// ----- unicorn/consistent-function-scoping -----
interface _UnicornConsistentFunctionScoping0 {
checkArrowFunctions?: boolean
}
type UnicornConsistentFunctionScoping = [_UnicornConsistentFunctionScoping0]
// ----- unicorn/expiring-todo-comments -----
interface _UnicornExpiringTodoComments0 {
terms?: string[]
ignore?: unknown[]
ignoreDatesOnPullRequests?: boolean
allowWarningComments?: boolean
date?: string
}
type UnicornExpiringTodoComments = [_UnicornExpiringTodoComments0]
// ----- unicorn/explicit-length-check -----
interface _UnicornExplicitLengthCheck0 {
"non-zero"?: ("greater-than" | "not-equal")
}
type UnicornExplicitLengthCheck = [_UnicornExplicitLengthCheck0]
// ----- unicorn/filename-case -----
type _UnicornFilenameCase0 = ({
case?: ("camelCase" | "snakeCase" | "kebabCase" | "pascalCase")
ignore?: unknown[]
} | {
cases?: {
camelCase?: boolean
snakeCase?: boolean
kebabCase?: boolean
pascalCase?: boolean
}
ignore?: unknown[]
})
type UnicornFilenameCase = [_UnicornFilenameCase0]
// ----- unicorn/import-style -----
type UnicornImportStyle = []|[{
checkImport?: boolean
checkDynamicImport?: boolean
checkExportFrom?: boolean
checkRequire?: boolean
extendDefaultStyles?: boolean
styles?: ModuleStyles
}]
type Styles = (false | BooleanObject)
interface ModuleStyles {
[k: string]: Styles
}
interface BooleanObject {
[k: string]: boolean
}
type UnicornImportStyle = UnicornImportStyle[]
// ----- unicorn/no-array-push-push -----
interface _UnicornNoArrayPushPush0 {
ignore?: unknown[]
}
type UnicornNoArrayPushPush = [_UnicornNoArrayPushPush0]
// ----- unicorn/no-array-reduce -----
interface _UnicornNoArrayReduce0 {
allowSimpleOperations?: boolean
}
type UnicornNoArrayReduce = [_UnicornNoArrayReduce0]
// ----- unicorn/no-keyword-prefix -----
interface _UnicornNoKeywordPrefix0 {
disallowedPrefixes?: []|[string]
checkProperties?: boolean
onlyCamelCase?: boolean
}
type UnicornNoKeywordPrefix = [_UnicornNoKeywordPrefix0]
// ----- unicorn/no-null -----
interface _UnicornNoNull0 {
checkStrictEquality?: boolean
}
type UnicornNoNull = [_UnicornNoNull0]
// ----- unicorn/no-typeof-undefined -----
interface _UnicornNoTypeofUndefined0 {
checkGlobalVariables?: boolean
}
type UnicornNoTypeofUndefined = [_UnicornNoTypeofUndefined0]
// ----- unicorn/no-unnecessary-polyfills -----
interface _UnicornNoUnnecessaryPolyfills0 {
targets: (string | unknown[] | {
[k: string]: unknown
})
}
type UnicornNoUnnecessaryPolyfills = [_UnicornNoUnnecessaryPolyfills0]
// ----- unicorn/no-useless-undefined -----
interface _UnicornNoUselessUndefined0 {
checkArguments?: boolean
checkArrowFunctionBody?: boolean
}
type UnicornNoUselessUndefined = [_UnicornNoUselessUndefined0]
// ----- unicorn/numeric-separators-style -----
interface _UnicornNumericSeparatorsStyle0 {
binary?: {
onlyIfContainsSeparator?: boolean
minimumDigits?: number
groupLength?: number
}
octal?: {
onlyIfContainsSeparator?: boolean
minimumDigits?: number
groupLength?: number
}
hexadecimal?: {
onlyIfContainsSeparator?: boolean
minimumDigits?: number
groupLength?: number
}
number?: {
onlyIfContainsSeparator?: boolean
minimumDigits?: number
groupLength?: number
}
onlyIfContainsSeparator?: boolean
}
type UnicornNumericSeparatorsStyle = [_UnicornNumericSeparatorsStyle0]
// ----- unicorn/prefer-add-event-listener -----
interface _UnicornPreferAddEventListener0 {
excludedPackages?: string[]
}
type UnicornPreferAddEventListener = [_UnicornPreferAddEventListener0]
// ----- unicorn/prefer-array-find -----
interface _UnicornPreferArrayFind0 {
checkFromLast?: boolean
}
type UnicornPreferArrayFind = [_UnicornPreferArrayFind0]
// ----- unicorn/prefer-array-flat -----
interface _UnicornPreferArrayFlat0 {
functions?: unknown[]
}
type UnicornPreferArrayFlat = [_UnicornPreferArrayFlat0]
// ----- unicorn/prefer-at -----
interface _UnicornPreferAt0 {
getLastElementFunctions?: unknown[]
checkAllIndexAccess?: boolean
}
type UnicornPreferAt = [_UnicornPreferAt0]
// ----- unicorn/prefer-export-from -----
interface _UnicornPreferExportFrom0 {
ignoreUsedVariables?: boolean
}
type UnicornPreferExportFrom = [_UnicornPreferExportFrom0]
// ----- unicorn/prefer-number-properties -----
interface _UnicornPreferNumberProperties0 {
checkInfinity?: boolean
}
type UnicornPreferNumberProperties = [_UnicornPreferNumberProperties0]
// ----- unicorn/prefer-object-from-entries -----
interface _UnicornPreferObjectFromEntries0 {
functions?: unknown[]
}
type UnicornPreferObjectFromEntries = [_UnicornPreferObjectFromEntries0]
// ----- unicorn/prefer-switch -----
interface _UnicornPreferSwitch0 {
minimumCases?: number
emptyDefaultCase?: ("no-default-comment" | "do-nothing-comment" | "no-default-case")
}
type UnicornPreferSwitch = [_UnicornPreferSwitch0]
// ----- unicorn/prefer-ternary -----
type _UnicornPreferTernary0 = ("always" | "only-single-line")
type UnicornPreferTernary = [_UnicornPreferTernary0]
// ----- unicorn/prevent-abbreviations -----
type UnicornPreventAbbreviations = []|[{
checkProperties?: boolean
checkVariables?: boolean
checkDefaultAndNamespaceImports?: (boolean | string)
checkShorthandImports?: (boolean | string)
checkShorthandProperties?: boolean
checkFilenames?: boolean
extendDefaultReplacements?: boolean
replacements?: Abbreviations
extendDefaultAllowList?: boolean
allowList?: BooleanObject
ignore?: unknown[]
}]
type Replacements = (false | BooleanObject)
interface Abbreviations {
[k: string]: Replacements
}
interface BooleanObject {
[k: string]: boolean
}
type UnicornPreventAbbreviations = UnicornPreventAbbreviations[]
// ----- unicorn/relative-url-style -----
type _UnicornRelativeUrlStyle0 = ("never" | "always")
type UnicornRelativeUrlStyle = [_UnicornRelativeUrlStyle0]
// ----- unicorn/string-content -----
interface _UnicornStringContent0 {
patterns?: {
[k: string]: (string | {
suggest: string
fix?: boolean
message?: string
})
}
}
type UnicornStringContent = [_UnicornStringContent0]
// ----- unicorn/switch-case-braces -----
type _UnicornSwitchCaseBraces0 = ("always" | "avoid")
type UnicornSwitchCaseBraces = [_UnicornSwitchCaseBraces0]
// ----- unicorn/template-indent -----
interface _UnicornTemplateIndent0 {
indent?: (string | number)
tags?: string[]
functions?: string[]
selectors?: string[]
comments?: string[]
}
type UnicornTemplateIndent = [_UnicornTemplateIndent0]